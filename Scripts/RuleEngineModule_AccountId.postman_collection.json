{
	"info": {
		"_postman_id": "e5add092-b11d-4fa3-8435-d60d00c976af",
		"name": "RuleEngineModule_AccountId",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authenticate",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "77c9fe55-9a96-40a3-83db-08342b21a7b1",
						"exec": [
							"",
							"var response = pm.response.json();",
							"",
							"//Set Token as global variable",
							"pm.globals.set(\"token\", response.token);",
							"",
							"",
							"pm.test(\"Authentication Successful\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Username : Property has to be present\", function (){",
							"    pm.expect(response).to.have.property('username');",
							"});",
							"pm.test(\"Username : Has to be string\", function (){",
							"    pm.expect(response.username).to.not.equal(null);",
							"    pm.expect(response.username).to.have.string;",
							"});",
							"pm.test(\"Token : Property has to be present\", function(){",
							"    pm.expect(response).to.have.property('token');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"username\":\"{{username}}\",\n\t\"password\":\"{{password}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api/auth/signin",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"auth",
						"signin"
					]
				}
			},
			"response": [
				{
					"name": "Authenticate",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\":\"user@finezza.in\",\n\t\"password\":\"password\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base-url}}:8091/api/auth/signin",
							"host": [
								"{{base-url}}"
							],
							"port": "8091",
							"path": [
								"api",
								"auth",
								"signin"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Tue, 23 Jun 2020 17:10:14 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-XSS-Protection",
							"value": "1; mode=block"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Expires",
							"value": "0"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						}
					],
					"cookie": [],
					"body": "{\n    \"username\": \"user@finezza.in\",\n    \"token\": \"eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyQGZpbmV6emEuaW4iLCJyb2xlcyI6WyJVU0VSIl0sImlhdCI6MTU5MjkzMjIxNCwiZXhwIjoxNTkyOTM1ODE0fQ.br2QuvgD7R7XNDAFJoPc1s5H4ejn0DGKuxzrUhgMLss\"\n}"
				}
			]
		},
		{
			"name": "Upload Statements",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5480d600-132a-464b-baf5-dee45f60f8da",
						"exec": [
							"//Function to check if the number is integer",
							"function isNormalInteger(str) {",
							"    var n = Math.floor(Number(str));",
							"    return n !== Infinity && String(n) === str && n >= 0;",
							"}",
							"",
							"var response = pm.response.json();",
							"",
							"if(pm.response.status == \"OK\")",
							"{",
							"    pm.test(\"Status code is 200, Successfully Created the Account\", function () {",
							"    pm.response.to.have.status(200);",
							"    });",
							"",
							"    pm.test(\"accountId : Property has to be present\", function (){",
							"    pm.expect(response).to.have.property('accountId');",
							"    pm.globals.set(\"BankAccountId\", response.accountId);",
							"    });",
							"",
							"    pm.test(\"accountReferenceNumber : Property has to be present\", function (){",
							"    pm.expect(response).to.have.property('accountReferenceNumber');",
							"    pm.globals.set(\"AccountReferenceNumber\", response.accountReferenceNumber);",
							"    });",
							"",
							"    pm.test(\"success : Property has to be present\", function (){",
							"    pm.expect(response).to.have.property('success');",
							"    });",
							"",
							"    pm.test(\"failed : Property has to be present\", function (){",
							"    pm.expect(response).to.have.property('failed');",
							"    });",
							"",
							"    if(response.success[0]){",
							"",
							"        pm.test(\"originalName : Property has to be present success array of objects\", function (){",
							"        pm.expect(response.success[0]).to.have.property('originalName');",
							"        });",
							"",
							"        pm.test(\"documentType : Property has to be present success array of objects\", function (){",
							"        pm.expect(response.success[0]).to.have.property('documentType');",
							"        });",
							"",
							"        pm.test(\"fileId : Property has to be present success array of objects\", function (){",
							"        pm.expect(response.success[0]).to.have.property('fileId');",
							"        });",
							"",
							"        //Setting file id as global variable",
							"        pm.globals.set(\"FileId\", response.success[0].fileId);",
							"",
							"        pm.test(\"password : Property has to be present for the password protected files\", function (){",
							"        pm.expect(response.success[0]).to.have.property('password');",
							"        pm.globals.set(\"FilePassword\", response.success[0].password);",
							"        });",
							"    }",
							"    else if(response.failed[0]){",
							"    ",
							"        pm.test(\"originalName : Property has to be present failed array of objects\", function (){",
							"        pm.expect(response.failed[0]).to.have.property('originalName');",
							"        });",
							"",
							"        pm.test(\"password : Property has to be present failed array of objects\", function (){",
							"        pm.expect(response.failed[0]).to.have.property('password');",
							"        });",
							"",
							"        pm.test(\"errorMessage : Property has to be present failed array of objects\", function (){",
							"        pm.expect(response).to.have.property('errorMessage');",
							"        });",
							"",
							"    }",
							"}",
							"else if(pm.response.status == \"Bad Request\")",
							"{",
							"    pm.test(\"errorMessage : Property has to be present\", function (){",
							"    pm.expect(response).to.have.property('errorMessage');",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"    pm.expect(pm.response.text()).to.include(\"Incorrect bank statement\");",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"No such account id found\");",
							"    });",
							"}",
							"",
							"else if(pm.response.status == \"Server Error\")",
							"{",
							"    pm.test(\"Status Code is 500: Server Error, Code is breaking/Runtime exception not being handled with appropriate error message\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"",
							"else if(pm.response.status == \"Unauthorized\")",
							"{",
							"    pm.test(\"Status Code is 401: Unauthorized, Login failed\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"",
							"else",
							"{",
							"    pm.test(\"Please check the inputs\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": "{{file}}"
						}
					],
					"options": {
						"formdata": {}
					}
				},
				"url": {
					"raw": "{{URL}}/api/bsa/v2/file/upload?bankId={{BankId}}&accountType={{AccountType}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"bsa",
						"v2",
						"file",
						"upload"
					],
					"query": [
						{
							"key": "accountId",
							"value": "759",
							"disabled": true
						},
						{
							"key": "accountNumber",
							"value": "AB83934",
							"disabled": true
						},
						{
							"key": "password",
							"value": "7000569412",
							"disabled": true
						},
						{
							"key": "validate",
							"value": "no",
							"disabled": true
						},
						{
							"key": "account",
							"value": null,
							"disabled": true
						},
						{
							"key": "bankId",
							"value": "{{BankId}}"
						},
						{
							"key": "accountType",
							"value": "{{AccountType}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Fetch Summary",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "586644f4-34cb-4094-96c2-ceb41b9e3ec8",
						"exec": [
							"var response = pm.response.json();",
							"",
							"var moment = require('moment');",
							"console.log(\"Displaying : require('moment') : \" + moment);",
							"",
							"var timeStamp = pm.globals.get(\"timeStamp\");",
							"console.log(\"Displaying TimeStamp : \" + timeStamp);",
							"",
							"if (!timeStamp) { //create new Timestamp (now + 180 seconds)",
							"    timeStamp = moment().add(120, 'seconds');",
							"    pm.globals.set(\"timeStamp\", timeStamp);",
							"    console.log(\"New TimeStamp : \" + timeStamp);",
							"}",
							"",
							"if(pm.response.status == \"OK\")",
							"{ ",
							"        ",
							"        pm.test(\"Status code is 200, Successfully fetched summary\", function () {",
							"        pm.response.to.have.status(200);",
							"        });",
							"",
							"        pm.test(\"summary : Property has to be present\", function (){",
							"        pm.expect(response).to.have.property('summary');",
							"        });",
							"",
							"        pm.test(\"date : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('date');",
							"        });",
							"",
							"        pm.test(\"total_inflow : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('total_inflow');",
							"        });",
							"",
							"        pm.test(\"inflow_count : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('inflow_count');",
							"        });",
							"",
							"        pm.test(\"total_outflow : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('total_outflow');",
							"        });",
							"",
							"        pm.test(\"outflow_count : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('outflow_count');",
							"        });",
							"",
							"        pm.test(\"total_delta : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('total_delta');",
							"        });",
							"",
							"        pm.test(\"daily_average_balance : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('daily_average_balance');",
							"        });",
							"",
							"        pm.test(\"total_emi : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('total_emi');",
							"        });",
							"",
							"        pm.test(\"emi_count : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('emi_count');",
							"        });",
							"",
							"        pm.test(\"total_cash_inflow : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('total_cash_inflow');",
							"        });",
							"        ",
							"        pm.test(\"cash_inflow_count : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('cash_inflow_count');",
							"        });",
							"",
							"        pm.test(\"total_cash_outflow : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('total_cash_outflow');",
							"        });",
							"",
							"        pm.test(\"cash_outflow_count : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('cash_outflow_count');",
							"        });",
							"",
							"        pm.test(\"total_biz_inflow : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('total_biz_inflow');",
							"        });",
							"",
							"        pm.test(\"biz_inflow_count : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('biz_inflow_count');",
							"        });",
							"",
							"        pm.test(\"total_biz_outflow : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('total_biz_outflow');",
							"        });",
							"",
							"        pm.test(\"biz_outflow_count : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('biz_outflow_count');",
							"        });",
							"",
							"        pm.test(\"central_credit_day : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('central_credit_day');",
							"        });",
							"",
							"        pm.test(\"central_debit_day : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('central_debit_day');",
							"        });",
							"",
							"        pm.test(\"start_date : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('start_date');",
							"        pm.globals.set(\"start_date\", response.summary[0].start_date);",
							"        });",
							"",
							"        pm.test(\"end_date : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('end_date');",
							"        pm.globals.set(\"end_date\", response.summary[0].end_date);",
							"        });",
							"",
							"        pm.test(\"account_id : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('account_id');",
							"        });",
							"    ",
							"}",
							"else if(pm.response.status == \"Bad Request\")",
							"{",
							"    if (moment() < moment(pm.globals.get(\"timeStamp\")))",
							"    {   ",
							"        postman.setNextRequest(\"Fetch Summary\");",
							"    }",
							"    else",
							"    {",
							"        pm.test(\"Set time limit is exceeded\", function() {",
							"            pm.expect.fail();",
							"         });",
							"        console.log(\"Stopping tests...\");",
							"        pm.globals.unset(\"timeStamp\");",
							"",
							"        pm.test(\"Status code is 400, Failed to fetch summary\", function () {",
							"        pm.response.to.have.status(400);",
							"        });",
							"",
							"        pm.test(\"error : Property has to be present\", function (){",
							"        pm.expect(response).to.have.property('error');",
							"        });",
							"",
							"        pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"Invalid bank account id\");",
							"        });",
							"",
							"        pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"Account not processed\");",
							"        });",
							"",
							"        pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"Invalid account reference number\");",
							"        });",
							"",
							"        pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"More than one account id/account reference number found in request parameter\");",
							"        });",
							"",
							"        pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"Anyone is mandatory, Account id or Account reference number\");",
							"        });",
							"    }",
							"",
							"}",
							"else if(pm.response.status == \"Server Error\")",
							"{",
							"    pm.test(\"Status Code is 500: Server Error, Code is breaking/Runtime exception not being handled with appropriate error message\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"else if(pm.response.status == \"Unauthorized\")",
							"{",
							"    pm.test(\"Status Code is 401: Unauthorized, Login failed\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"else",
							"{",
							"    pm.test(\"Please check the inputs\", function(){",
							"    pm.expect.fail();",
							"    });",
							"}",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "00d253af-f827-4bfb-83e8-e08adf46e8a7",
						"exec": [
							"setTimeout(function(){}, 1000);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"accountId\": \"{{BankAccountId}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api/bsa/v2/analysis/summary?accountId={{BankAccountId}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"bsa",
						"v2",
						"analysis",
						"summary"
					],
					"query": [
						{
							"key": "type",
							"value": "credit",
							"disabled": true
						},
						{
							"key": "accountId",
							"value": "{{BankAccountId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Download CAM",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b8e0d92e-b04e-4d98-8eab-9472b39a56d3",
						"exec": [
							"var moment = require('moment');",
							"console.log(\"Displaying : require('moment') : \" + moment);",
							"",
							"var timeStamp = pm.globals.get(\"timeStamp\");",
							"console.log(\"Displaying TimeStamp : \" + timeStamp);",
							"",
							"if (!timeStamp) { //create new Timestamp (now + 180 seconds)",
							"    timeStamp = moment().add(120, 'seconds');",
							"    pm.globals.set(\"timeStamp\", timeStamp);",
							"    console.log(\"New TimeStamp : \" + timeStamp);",
							"}",
							"",
							"if(pm.response.status == \"OK\"){",
							"    pm.test(\"Status code is 200, Successfully Downloaded the CAM\", function () {",
							"    pm.response.to.have.status(200);",
							"    });",
							"}",
							"else if(pm.response.status == \"Bad Request\")",
							"{",
							"    if (moment() < moment(pm.globals.get(\"timeStamp\")))",
							"    {   ",
							"        postman.setNextRequest(\"Download CAM\");",
							"    }",
							"    else",
							"    {",
							"        pm.test(\"Set time limit is exceeded\", function() {",
							"            pm.expect.fail();",
							"         });",
							"        console.log(\"Stopping tests...\");",
							"        postman.setNextRequest(null);",
							"        pm.globals.unset(\"timeStamp\");",
							"",
							"        pm.test(\"Status code is 400, Failed to download the CAM\", function () {",
							"        pm.response.to.have.status(400);",
							"        });",
							"",
							"        pm.test(\"error : Property has to be present\", function (){",
							"        pm.expect(pm.response).to.have.property('error');",
							"        });",
							"",
							"        pm.test(\"timestamp : Property has to be present\", function (){",
							"        pm.expect(pm.response).to.have.property('timestamp');",
							"        });",
							"",
							"        pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"Invalid bank account id\");",
							"        });",
							"",
							"        pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"Invalid account reference number\");",
							"        });",
							"",
							"        pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"Invalid id(s)\");",
							"        });",
							"",
							"        pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"Account not processed\");",
							"        });",
							"",
							"        pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"Account is deleted\");",
							"        });",
							"    }",
							"}",
							"else if(pm.response.status == \"Server Error\")",
							"{",
							"    pm.test(\"Status Code is 500: Server Error, Code is breaking/Runtime exception not being handled with appropriate error message\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"else if(pm.response.status == \"Unauthorized\")",
							"{",
							"    pm.test(\"Status Code is 401: Unauthorized, Login failed\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"else",
							"{",
							"    pm.test(\"Please check the inputs\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/api/bsa/v2/cam/download?accountId={{BankAccountId}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"bsa",
						"v2",
						"cam",
						"download"
					],
					"query": [
						{
							"key": "accountId",
							"value": "{{BankAccountId}}"
						}
					]
				},
				"description": "API to download the CAM file for a given account by accountId or account reference number"
			},
			"response": []
		},
		{
			"name": "Re-Run Rule Engine",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2829f2fb-48f6-43a5-b409-0d15bbacaa4a",
						"exec": [
							"var response = pm.response.json();",
							"",
							"var moment = require('moment');",
							"console.log(\"Displaying : require('moment') : \" + moment);",
							"",
							"var timeStamp = pm.globals.get(\"timeStamp\");",
							"console.log(\"Displaying TimeStamp : \" + timeStamp);",
							"",
							"if (!timeStamp) { //create new Timestamp (now + 180 seconds)",
							"    timeStamp = moment().add(120, 'seconds');",
							"    pm.globals.set(\"timeStamp\", timeStamp);",
							"    console.log(\"New TimeStamp : \" + timeStamp);",
							"}",
							"",
							"if(pm.response.status == \"OK\")",
							"{ ",
							"        ",
							"        pm.test(\"Status code is 200, Successfully Re-Run Rule Engine\", function () {",
							"        pm.response.to.have.status(200);",
							"        });",
							"",
							"        pm.test(\"rulesList : Property has to be present\", function (){",
							"        pm.expect(response).to.have.property('rulesList');",
							"        });",
							"",
							"        pm.test(\"ruleStatus : Property has to be present in rulesList object\", function (){",
							"        pm.expect(response.rulesList[0]).to.have.property('ruleStatus');",
							"        });",
							"",
							"        pm.test(\"ruleDescription : Property has to be present in rulesList object\", function (){",
							"        pm.expect(response.rulesList[0]).to.have.property('ruleDescription');",
							"        });",
							"",
							"        pm.test(\"objectId : Property has to be present in rulesList object\", function (){",
							"        pm.expect(response.rulesList[0]).to.have.property('objectId');",
							"        });",
							"",
							"        pm.test(\"ruleVersion : Property has to be present in rulesList object\", function (){",
							"        pm.expect(response.rulesList[0]).to.have.property('ruleVersion');",
							"        });",
							"",
							"        pm.test(\"serviceType : Property has to be present in rulesList object\", function (){",
							"        pm.expect(response.rulesList[0]).to.have.property('serviceType');",
							"        });",
							"",
							"        pm.test(\"ruleName : Property has to be present in rulesList object\", function (){",
							"        pm.expect(response.rulesList[0]).to.have.property('ruleName');",
							"        });",
							"}",
							"else if(pm.response.status == \"Bad Request\")",
							"{",
							"    if (moment() < moment(pm.globals.get(\"timeStamp\")))",
							"    {   ",
							"        postman.setNextRequest(\"Re-Run Rule Engine\");",
							"    }",
							"    else",
							"    {",
							"        pm.test(\"Set time limit is exceeded\", function() {",
							"            pm.expect.fail();",
							"         });",
							"        console.log(\"Stopping tests...\");",
							"        pm.globals.unset(\"timeStamp\");",
							"",
							"        pm.test(\"Status code is 400, Failed to Re-run Rule Engine\", function () {",
							"        pm.response.to.have.status(400);",
							"        });",
							"",
							"        pm.test(\"error : Property has to be present\", function (){",
							"        pm.expect(response).to.have.property('error');",
							"        });",
							"",
							"        pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"Invalid account id\");",
							"        });",
							"",
							"        pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"Invalid account reference number\");",
							"        });",
							"",
							"        pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"More than one account id/account reference number found in request parameter\");",
							"        });",
							"",
							"        pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"Anyone is mandatory, Account id or Account reference number\");",
							"        });",
							"",
							"        pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"Account is deleted\");",
							"        });",
							"",
							"        pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"Account not processed\");",
							"        });",
							"",
							"        pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"No analysis found for the account Id\");",
							"        });",
							"",
							"        pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"No existing rules found for account\");",
							"        });",
							"    }",
							"",
							"}",
							"else if(pm.response.status == \"Server Error\")",
							"{",
							"    pm.test(\"Status Code is 500: Server Error, Code is breaking/Runtime exception not being handled with appropriate error message\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"else if(pm.response.status == \"Unauthorized\")",
							"{",
							"    pm.test(\"Status Code is 401: Unauthorized, Login failed\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"else",
							"{",
							"    pm.test(\"Please check the inputs\", function(){",
							"    pm.expect.fail();",
							"    });",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{URL}}/api/bsa/v2/ruleEngine?accountId={{BankAccountId}}&useRule={{UseRule}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"bsa",
						"v2",
						"ruleEngine"
					],
					"query": [
						{
							"key": "accountId",
							"value": "{{BankAccountId}}"
						},
						{
							"key": "useRule",
							"value": "{{UseRule}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Fetch Rule Engine result",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "601d7a5f-48a3-493c-a879-d4e69188a674",
						"exec": [
							"",
							"var response = pm.response.json();",
							"",
							"var moment = require('moment');",
							"console.log(\"Displaying : require('moment') : \" + moment);",
							"",
							"var timeStamp = pm.globals.get(\"timeStamp\");",
							"console.log(\"Displaying TimeStamp : \" + timeStamp);",
							"",
							"if (!timeStamp) { //create new Timestamp (now + 180 seconds)",
							"    timeStamp = moment().add(120, 'seconds');",
							"    pm.globals.set(\"timeStamp\", timeStamp);",
							"    console.log(\"New TimeStamp : \" + timeStamp);",
							"}",
							"",
							"if(pm.response.status == \"OK\")",
							"{ ",
							"        ",
							"        pm.test(\"Status code is 200, Successfully Fetch Rule Engine result\", function () {",
							"        pm.response.to.have.status(200);",
							"        });",
							"}",
							"else if(pm.response.status == \"Bad Request\")",
							"{",
							"    if (moment() < moment(pm.globals.get(\"timeStamp\")))",
							"    {   ",
							"        postman.setNextRequest(\"Fetch Rule Engine result\");",
							"    }",
							"    else",
							"    {",
							"        pm.test(\"Set time limit is exceeded\", function() {",
							"            pm.expect.fail();",
							"         });",
							"        console.log(\"Stopping tests...\");",
							"        pm.globals.unset(\"timeStamp\");",
							"",
							"        pm.test(\"Status code is 400, Failed to Fetch Rule Engine result\", function () {",
							"        pm.response.to.have.status(400);",
							"        });",
							"",
							"        pm.test(\"error : Property has to be present\", function (){",
							"        pm.expect(response).to.have.property('error');",
							"        });",
							"",
							"        pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"Invalid account id\");",
							"        });",
							"",
							"        pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"Invalid account reference number\");",
							"        });",
							"",
							"        pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"More than one account id/account reference number found in request parameter\");",
							"        });",
							"",
							"        pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"Anyone is mandatory, Account id or Account reference number\");",
							"        });",
							"",
							"        pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"Account is deleted\");",
							"        });",
							"",
							"        pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"Account not processed\");",
							"        });",
							"",
							"        pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"No analysis found for the account Id\");",
							"        });",
							"",
							"        pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"No existing rules found for account\");",
							"        });",
							"    }",
							"",
							"}",
							"else if(pm.response.status == \"Server Error\")",
							"{",
							"    pm.test(\"Status Code is 500: Server Error, Code is breaking/Runtime exception not being handled with appropriate error message\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"else if(pm.response.status == \"Unauthorized\")",
							"{",
							"    pm.test(\"Status Code is 401: Unauthorized, Login failed\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"else",
							"{",
							"    pm.test(\"Please check the inputs\", function(){",
							"    pm.expect.fail();",
							"    });",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{URL}}/api/bsa/v2/ruleEngine?accountId={{BankAccountId}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"bsa",
						"v2",
						"ruleEngine"
					],
					"query": [
						{
							"key": "accountId",
							"value": "{{BankAccountId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Re Generate CAM",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ad801f5b-df1c-4bbe-a8b9-14be401e2fa3",
						"exec": [
							"var response = pm.response.json();",
							"",
							"var moment = require('moment');",
							"console.log(\"Displaying : require('moment') : \" + moment);",
							"",
							"var timeStamp = pm.globals.get(\"timeStamp\");",
							"console.log(\"Displaying TimeStamp : \" + timeStamp);",
							"",
							"if (!timeStamp) { //create new Timestamp (now + 180 seconds)",
							"    timeStamp = moment().add(120, 'seconds');",
							"    pm.globals.set(\"timeStamp\", timeStamp);",
							"    console.log(\"New TimeStamp : \" + timeStamp);",
							"}",
							"",
							"if(pm.response.status == \"OK\")",
							"{ ",
							"        pm.test(\"Status code is 200, Successfully Re Generate CAM\", function () {",
							"        pm.response.to.have.status(200);",
							"        });",
							"",
							"        pm.test(\"message : Property has to be present\", function (){",
							"        pm.expect(response).to.have.property('message');",
							"        });",
							"",
							"        pm.test(\"The message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"CAM generated successfully\");",
							"        });",
							"}",
							"else if(pm.response.status == \"Bad Request\")",
							"{",
							"    if (moment() < moment(pm.globals.get(\"timeStamp\")))",
							"    {   ",
							"        postman.setNextRequest(\"Re Generate CAM\");",
							"    }",
							"    else",
							"    {",
							"        pm.test(\"Set time limit is exceeded\", function() {",
							"            pm.expect.fail();",
							"         });",
							"        console.log(\"Stopping tests...\");",
							"        pm.globals.unset(\"timeStamp\");",
							"",
							"        pm.test(\"Status code is 400, Failed to Re Generate CAM\", function () {",
							"        pm.response.to.have.status(400);",
							"        });",
							"",
							"        pm.test(\"error : Property has to be present\", function (){",
							"        pm.expect(response).to.have.property('error');",
							"        });",
							"",
							"        pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"Invalid account id\");",
							"        });",
							"",
							"        pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"Invalid account reference number\");",
							"        });",
							"",
							"        pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"More than one account id/account reference number found in request parameter\");",
							"        });",
							"",
							"        pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"Anyone is mandatory, Account id or Account reference number\");",
							"        });",
							"",
							"        pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"Account is deleted\");",
							"        });",
							"",
							"        pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"Account not processed\");",
							"        });",
							"    }",
							"}",
							"else if(pm.response.status == \"Server Error\")",
							"{",
							"    pm.test(\"Status Code is 500: Server Error, Code is breaking/Runtime exception not being handled with appropriate error message\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"else if(pm.response.status == \"Unauthorized\")",
							"{",
							"    pm.test(\"Status Code is 401: Unauthorized, Login failed\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"else",
							"{",
							"    pm.test(\"Please check the inputs\", function(){",
							"    pm.expect.fail();",
							"    });",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{URL}}/api/bsa/v2/regenerateCam?accountId={{BankAccountId}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"bsa",
						"v2",
						"regenerateCam"
					],
					"query": [
						{
							"key": "accountId",
							"value": "{{BankAccountId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Fetch Summary1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fc649504-9269-49b3-82cb-05930e8ad6fe",
						"exec": [
							"var response = pm.response.json();",
							"",
							"var moment = require('moment');",
							"console.log(\"Displaying : require('moment') : \" + moment);",
							"",
							"var timeStamp = pm.globals.get(\"timeStamp\");",
							"console.log(\"Displaying TimeStamp : \" + timeStamp);",
							"",
							"if (!timeStamp) { //create new Timestamp (now + 180 seconds)",
							"    timeStamp = moment().add(120, 'seconds');",
							"    pm.globals.set(\"timeStamp\", timeStamp);",
							"    console.log(\"New TimeStamp : \" + timeStamp);",
							"}",
							"",
							"if(pm.response.status == \"OK\")",
							"{ ",
							"        ",
							"        pm.test(\"Status code is 200, Successfully fetched summary\", function () {",
							"        pm.response.to.have.status(200);",
							"        });",
							"",
							"        pm.test(\"summary : Property has to be present\", function (){",
							"        pm.expect(response).to.have.property('summary');",
							"        });",
							"",
							"        pm.test(\"date : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('date');",
							"        });",
							"",
							"        pm.test(\"total_inflow : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('total_inflow');",
							"        });",
							"",
							"        pm.test(\"inflow_count : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('inflow_count');",
							"        });",
							"",
							"        pm.test(\"total_outflow : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('total_outflow');",
							"        });",
							"",
							"        pm.test(\"outflow_count : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('outflow_count');",
							"        });",
							"",
							"        pm.test(\"total_delta : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('total_delta');",
							"        });",
							"",
							"        pm.test(\"daily_average_balance : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('daily_average_balance');",
							"        });",
							"",
							"        pm.test(\"total_emi : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('total_emi');",
							"        });",
							"",
							"        pm.test(\"emi_count : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('emi_count');",
							"        });",
							"",
							"        pm.test(\"total_cash_inflow : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('total_cash_inflow');",
							"        });",
							"        ",
							"        pm.test(\"cash_inflow_count : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('cash_inflow_count');",
							"        });",
							"",
							"        pm.test(\"total_cash_outflow : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('total_cash_outflow');",
							"        });",
							"",
							"        pm.test(\"cash_outflow_count : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('cash_outflow_count');",
							"        });",
							"",
							"        pm.test(\"total_biz_inflow : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('total_biz_inflow');",
							"        });",
							"",
							"        pm.test(\"biz_inflow_count : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('biz_inflow_count');",
							"        });",
							"",
							"        pm.test(\"total_biz_outflow : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('total_biz_outflow');",
							"        });",
							"",
							"        pm.test(\"biz_outflow_count : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('biz_outflow_count');",
							"        });",
							"",
							"        pm.test(\"central_credit_day : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('central_credit_day');",
							"        });",
							"",
							"        pm.test(\"central_debit_day : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('central_debit_day');",
							"        });",
							"",
							"        pm.test(\"start_date : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('start_date');",
							"        pm.globals.set(\"start_date\", response.summary[0].start_date);",
							"        });",
							"",
							"        pm.test(\"end_date : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('end_date');",
							"        pm.globals.set(\"end_date\", response.summary[0].end_date);",
							"        });",
							"",
							"        pm.test(\"account_id : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('account_id');",
							"        });",
							"    ",
							"}",
							"else if(pm.response.status == \"Bad Request\")",
							"{",
							"    if (moment() < moment(pm.globals.get(\"timeStamp\")))",
							"    {   ",
							"        postman.setNextRequest(\"Fetch Summary1\");",
							"    }",
							"    else",
							"    {",
							"        pm.test(\"Set time limit is exceeded\", function() {",
							"            pm.expect.fail();",
							"         });",
							"        console.log(\"Stopping tests...\");",
							"        pm.globals.unset(\"timeStamp\");",
							"",
							"        pm.test(\"Status code is 400, Failed to fetch summary\", function () {",
							"        pm.response.to.have.status(400);",
							"        });",
							"",
							"        pm.test(\"error : Property has to be present\", function (){",
							"        pm.expect(response).to.have.property('error');",
							"        });",
							"",
							"        pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"Invalid bank account id\");",
							"        });",
							"",
							"        pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"Invalid account reference number\");",
							"        });",
							"",
							"        pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"Account not processed\");",
							"        });",
							"",
							"        pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"More than one account id/account reference number found in request parameter\");",
							"        });",
							"",
							"        pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"Anyone is mandatory, Account id or Account reference number\");",
							"        });",
							"    }",
							"",
							"}",
							"else if(pm.response.status == \"Server Error\")",
							"{",
							"    pm.test(\"Status Code is 500: Server Error, Code is breaking/Runtime exception not being handled with appropriate error message\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"else if(pm.response.status == \"Unauthorized\")",
							"{",
							"    pm.test(\"Status Code is 401: Unauthorized, Login failed\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"else",
							"{",
							"    pm.test(\"Please check the inputs\", function(){",
							"    pm.expect.fail();",
							"    });",
							"}",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "d7ffdb58-e221-47f4-879e-bfe187325a5a",
						"exec": [
							"setTimeout(function(){}, 1000);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"accountId\": \"{{BankAccountId}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api/bsa/v2/analysis/summary?accountId={{BankAccountId}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"bsa",
						"v2",
						"analysis",
						"summary"
					],
					"query": [
						{
							"key": "type",
							"value": "credit",
							"disabled": true
						},
						{
							"key": "accountId",
							"value": "{{BankAccountId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}