{
	"info": {
		"_postman_id": "1ed3ab5f-e83f-49f7-883b-ffb2b1717de5",
		"name": "DeleteFile",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authenticate",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1057245a-1a01-4c02-ab13-30ce670e6ec1",
						"exec": [
							"",
							"var response = pm.response.json();",
							"",
							"//Set Token as global variable",
							"pm.globals.set(\"token\", response.token);",
							"",
							"",
							"pm.test(\"Authentication Successful\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Username : Property has to be present\", function (){",
							"    pm.expect(response).to.have.property('username');",
							"});",
							"pm.test(\"Username : Has to be string\", function (){",
							"    pm.expect(response.username).to.not.equal(null);",
							"    pm.expect(response.username).to.have.string;",
							"});",
							"pm.test(\"Token : Property has to be present\", function(){",
							"    pm.expect(response).to.have.property('token');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"username\":\"{{username}}\",\n\t\"password\":\"{{password}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api/auth/signin",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"auth",
						"signin"
					]
				}
			},
			"response": [
				{
					"name": "Authenticate",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\":\"user@finezza.in\",\n\t\"password\":\"password\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base-url}}:8091/api/auth/signin",
							"host": [
								"{{base-url}}"
							],
							"port": "8091",
							"path": [
								"api",
								"auth",
								"signin"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Tue, 23 Jun 2020 17:10:14 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-XSS-Protection",
							"value": "1; mode=block"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Expires",
							"value": "0"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						}
					],
					"cookie": [],
					"body": "{\n    \"username\": \"user@finezza.in\",\n    \"token\": \"eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyQGZpbmV6emEuaW4iLCJyb2xlcyI6WyJVU0VSIl0sImlhdCI6MTU5MjkzMjIxNCwiZXhwIjoxNTkyOTM1ODE0fQ.br2QuvgD7R7XNDAFJoPc1s5H4ejn0DGKuxzrUhgMLss\"\n}"
				}
			]
		},
		{
			"name": "Create Account",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3b21e2f1-19c1-4bfb-a6d9-d3dbb4093d5a",
						"exec": [
							"//Function to check if the number is integer",
							"function isNormalInteger(str) {",
							"    var n = Math.floor(Number(str));",
							"    return n !== Infinity && String(n) === str && n >= 0;",
							"}",
							"",
							"var response = pm.response.json();",
							"",
							"",
							"if(pm.response.status == \"Created\")",
							"{",
							"    pm.test(\"Status code is 201, Successfully Created the Account\", function () {",
							"    pm.response.to.have.status(201);",
							"    });",
							"    pm.globals.set(\"CreatedAccount\", response);",
							"    pm.globals.set(\"BankAccountId\", response.accountId);",
							"    pm.globals.set(\"AccountName\", response.accountName);",
							"    pm.globals.set(\"BankAccountNumber\", response.accountNumber);",
							"    pm.globals.set(\"AccountType\", response.accountType);",
							"    pm.globals.set(\"AccountTypeName\", response.accountTypeName);",
							"    pm.globals.set(\"BankId\", response.bankId);",
							"    pm.globals.set(\"BankName\", response.bankName);",
							"    pm.globals.set(\"AccountStatus\", response.status);",
							"    pm.globals.set(\"CallBackURL\", response.callbackUrl);",
							"    pm.globals.set(\"AccountReferenceNumber\", response.accountReferenceNumber);",
							" ",
							"",
							"    var schema = pm.globals.get(\"CreatedAccount\");",
							"",
							"    pm.test(\"Bank Account Id is \" + schema.accountId);",
							"    ",
							"    //Assertions to check if mandatory fields are empty",
							"    pm.test(\"Bank Account Id has to be string\", function () {",
							"        pm.expect(isNormalInteger(schema.accountId)).to.be.true;",
							"        pm.expect(schema.accountId).to.not.equal(null);",
							"        pm.expect(schema.accountId).to.not.be.empty;",
							"        });",
							"",
							"    pm.test(\"Account name has to be string\", function () {",
							"        pm.expect(schema.accountName).to.have.string;",
							"        pm.expect(schema.accountName).to.not.equal(null);",
							"        });",
							"",
							"    pm.test(\"Account number has to be a valid\", function () {",
							"        pm.expect(schema.accountNumber).to.have.string;",
							"        pm.expect(schema.accountNumber).to.not.equal(null);",
							"        });",
							"    ",
							"    pm.test(\"Account Type has to be a number\", function () {",
							"        pm.expect(schema.accountType).to.be.oneOf([\"1\", \"2\", \"3\", \"4\"]);",
							"        });",
							"    ",
							"    pm.test(\"AccountTypeName has to be a string\", function () {",
							"        pm.expect(schema.accountTypeName).to.have.string;",
							"        pm.expect(schema.accountTypeName).to.be.oneOf([\"Savings Account\",\"Current Account\",\"Overdraft Account\", \"Cash Credit Account\"]);",
							"        });",
							"    ",
							"    pm.test(\"Bank Id has to be a number\", function () {",
							"        pm.expect(schema.bankId).to.not.equal(null);",
							"        });",
							"",
							"    pm.test(\"Bank name has to be string\", function () {",
							"        pm.expect(schema.bankName).to.have.string;",
							"        pm.expect(schema.bankName).to.not.equal(null);",
							"        pm.expect(schema.bankName).to.not.be.empty;",
							"        });",
							"",
							"    pm.test(\"Account Status has to be string\", function () {",
							"        pm.expect(schema.status).to.have.string;",
							"        pm.expect(schema.status).to.not.equal(null);",
							"        });",
							"",
							"    pm.test(\"CallBackURL has to be string\", function () {",
							"        pm.expect(schema.callbackUrl).to.have.string;",
							"        pm.expect(schema.callbackUrl).to.not.equal(null);",
							"        pm.expect(schema.callbackUrl).to.not.be.empty;",
							"        });",
							"",
							"    pm.test(\"Account Reference Number has to be string\", function () {",
							"        pm.expect(schema.accountReferenceNumber).to.have.string;",
							"        pm.expect(schema.accountReferenceNumber).to.not.equal(null);",
							"        pm.expect(schema.accountReferenceNumber).to.not.be.empty;",
							"        });",
							"}",
							"",
							"else if(pm.response.status == \"Bad Request\")",
							"{",
							"    pm.test(\"error : Property has to be present\", function (){",
							"    pm.expect(response).to.have.property('error');",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"    pm.expect(pm.response.text()).to.include(\"Invalid bank id\");",
							"        });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"Invalid account type\");",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"JSON parse error....\");",
							"    });",
							"",
							"}",
							"",
							"else if(pm.response.status == \"Server Error\")",
							"{",
							"    pm.test(\"Status Code is 500: Server Error, Code is breaking/Runtime exception not being handled with appropriate error message\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"",
							"else if(pm.response.status == \"Unauthorized\")",
							"{",
							"    pm.test(\"Status Code is 401: Unauthorized, Login failed\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"",
							"else",
							"{",
							"    pm.test(\"Please check the inputs\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"bankId\": \"{{bankId}}\",\n   \"accountType\": \"{{accountType}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api/bsa/v2/account",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"bsa",
						"v2",
						"account"
					]
				},
				"description": "To create a new account, users will pass mandatory fields highlighted in the request body. It can also send in group Id to map it to a group. If a group Id is passed in an api request but is not present, then it will create a new group and map it to a new account.\nSimilarly accountReferenceNumber can be passed by clients to map the account details. If not passed it will create one and send it back in response.\nIt is synchronized api, on success the response will have a new account object in response."
			},
			"response": [
				{
					"name": "Create Account",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"accountNumber\": \"34-9221\",\n   \"bankId\": 9,\n   \"accountType\": 1,\n   \"referenceId\": \"N92389129\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base-url}}:8091/api/bsa/v2/account",
							"host": [
								"{{base-url}}"
							],
							"port": "8091",
							"path": [
								"api",
								"bsa",
								"v2",
								"account"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Wed, 24 Jun 2020 05:16:23 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-XSS-Protection",
							"value": "1; mode=block"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Expires",
							"value": "0"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						}
					],
					"cookie": [],
					"body": "{\n    \"accountId\": 3,\n    \"accountName\": \"\",\n    \"accountNumber\": \"34-9221\",\n    \"accountType\": 1,\n    \"accountTypeName\": \"Savings Account\",\n    \"bankId\": 9,\n    \"bankName\": \"ICICI Bank\",\n    \"status\": \"New\",\n    \"callbackUrl\": \"\",\n    \"referenceId\": \"N92389129\"\n}"
				}
			]
		},
		{
			"name": "Upload Statements",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ab29697-e6fe-4d28-abb8-64cbfc784ade",
						"exec": [
							"//Function to check if the number is integer",
							"function isNormalInteger(str) {",
							"    var n = Math.floor(Number(str));",
							"    return n !== Infinity && String(n) === str && n >= 0;",
							"}",
							"",
							"var response = pm.response.json();",
							"",
							"if(pm.response.status == \"OK\")",
							"{",
							"    pm.test(\"Status code is 200, Successfully Created the Account\", function () {",
							"    pm.response.to.have.status(200);",
							"    });",
							"",
							"    pm.test(\"accountId : Property has to be present\", function (){",
							"    pm.expect(response).to.have.property('accountId');",
							"    });",
							"",
							"    pm.test(\"accountReferenceNumber : Property has to be present\", function (){",
							"    pm.expect(response).to.have.property('accountReferenceNumber');",
							"    });",
							"",
							"    pm.test(\"success : Property has to be present\", function (){",
							"    pm.expect(response).to.have.property('success');",
							"    });",
							"",
							"    pm.test(\"failed : Property has to be present\", function (){",
							"    pm.expect(response).to.have.property('failed');",
							"    });",
							"",
							"    if(response.success[0]){",
							"",
							"        pm.test(\"originalName : Property has to be present success array of objects\", function (){",
							"        pm.expect(response.success[0]).to.have.property('originalName');",
							"        });",
							"",
							"        pm.test(\"documentType : Property has to be present success array of objects\", function (){",
							"        pm.expect(response.success[0]).to.have.property('documentType');",
							"        });",
							"",
							"        pm.test(\"fileId : Property has to be present success array of objects\", function (){",
							"        pm.expect(response.success[0]).to.have.property('fileId');",
							"        //Setting file id as global variable",
							"        pm.globals.set(\"FileId\", response.success[0].fileId);",
							"        });",
							"",
							"",
							"        pm.test(\"password : Property has to be present for the password protected files\", function (){",
							"        pm.expect(response.success[0]).to.have.property('password');",
							"        pm.globals.set(\"FilePassword\", response.success[0].password);",
							"        });",
							"    }",
							"    else if(response.failed[0]){",
							"    ",
							"        pm.test(\"originalName : Property has to be present failed array of objects\", function (){",
							"        pm.expect(response.failed[0]).to.have.property('originalName');",
							"        });",
							"",
							"        pm.test(\"password : Property has to be present failed array of objects\", function (){",
							"        pm.expect(response.failed[0]).to.have.property('password');",
							"        });",
							"",
							"        pm.test(\"errorMessage : Property has to be present failed array of objects\", function (){",
							"        pm.expect(response).to.have.property('errorMessage');",
							"        });",
							"",
							"    }",
							"}",
							"else if(pm.response.status == \"Bad Request\")",
							"{",
							"    pm.test(\"errorMessage : Property has to be present\", function (){",
							"    pm.expect(response).to.have.property('errorMessage');",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"    pm.expect(pm.response.text()).to.include(\"Incorrect bank statement\");",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"No such account id found\");",
							"    });",
							"}",
							"",
							"else if(pm.response.status == \"Server Error\")",
							"{",
							"    pm.test(\"Status Code is 500: Server Error, Code is breaking/Runtime exception not being handled with appropriate error message\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"",
							"else if(pm.response.status == \"Unauthorized\")",
							"{",
							"    pm.test(\"Status Code is 401: Unauthorized, Login failed\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"",
							"else",
							"{",
							"    pm.test(\"Please check the inputs\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": "{{file}}"
						}
					],
					"options": {
						"formdata": {}
					}
				},
				"url": {
					"raw": "{{URL}}/api/bsa/v2/file/upload?accountReferenceNumber={{AccountReferenceNumber}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"bsa",
						"v2",
						"file",
						"upload"
					],
					"query": [
						{
							"key": "accountId",
							"value": "759",
							"disabled": true
						},
						{
							"key": "accountNumber",
							"value": "AB83934",
							"disabled": true
						},
						{
							"key": "password",
							"value": "7000569412",
							"disabled": true
						},
						{
							"key": "validate",
							"value": "no",
							"disabled": true
						},
						{
							"key": "account",
							"value": null,
							"disabled": true
						},
						{
							"key": "accountReferenceNumber",
							"value": "{{AccountReferenceNumber}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Fetch File Detail",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "10570c15-6011-415d-8a77-b861261291c3",
						"exec": [
							"var response = pm.response.json();",
							"",
							"if(pm.response.status == \"OK\")",
							"{",
							"    pm.test(\"Status code is 200, Successfully fetched file details\", function () {",
							"    pm.response.to.have.status(200);",
							"    });",
							"",
							"    pm.test(\"fileId : Property has to be present in the response\", function (){",
							"    pm.expect(response).to.have.property('fileId');",
							"    });",
							"",
							"    pm.test(\"status : Property has to be present in the response\", function (){",
							"    pm.expect(response).to.have.property('status');",
							"    });",
							"",
							"    pm.test(\"originalName : Property has to be present in the response\", function (){",
							"    pm.expect(response).to.have.property('originalName');",
							"    });",
							"",
							"    pm.test(\"documentType : Property has to be present in the response\", function (){",
							"    pm.expect(response).to.have.property('documentType');",
							"    });",
							"",
							"    pm.test(\"password : Property has to be present in the response\", function (){",
							"    pm.expect(response).to.have.property('password');",
							"    });",
							"",
							"    pm.test(\"fromDate : Property has to be present in the response\", function (){",
							"    pm.expect(response).to.have.property('fromDate');",
							"    });",
							"",
							"    pm.test(\"tillDate : Property has to be present in the response\", function (){",
							"    pm.expect(response).to.have.property('tillDate');",
							"    });",
							"",
							"    pm.test(\"creatorName : Property has to be present in the response\", function (){",
							"    pm.expect(response).to.have.property('creatorName');",
							"    });",
							"",
							"    pm.test(\"producerName : Property has to be present in the response\", function (){",
							"    pm.expect(response).to.have.property('producerName');",
							"    });",
							"",
							"}",
							"else if(pm.response.status == \"Bad Request\")",
							"{",
							"    pm.test(\"Status code is 400, Failed to fetch file details\", function () {",
							"    pm.response.to.have.status(400);",
							"    });",
							"",
							"    pm.test(\"error : Property has to be present\", function (){",
							"    pm.expect(response).to.have.property('error');",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"    pm.expect(pm.response.text()).to.include(\"Invalid file id\");",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"    pm.expect(pm.response.text()).to.include(\"File Not Found\");",
							"    });",
							"}",
							"else if(pm.response.status == \"Server Error\")",
							"{",
							"    pm.test(\"Status Code is 500: Server Error, Code is breaking/Runtime exception not being handled with appropriate error message\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"else if(pm.response.status == \"Unauthorized\")",
							"{",
							"    pm.test(\"Status Code is 401: Unauthorized, Login failed\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"else",
							"{",
							"    pm.test(\"Please check the inputs\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/api/bsa/v2/file/{{FileId}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"bsa",
						"v2",
						"file",
						"{{FileId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete File",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fb84f6ab-219a-4cd3-9bb4-2cee01a8cd66",
						"exec": [
							"//Function to check if the number is integer",
							"function isNormalInteger(str) {",
							"    var n = Math.floor(Number(str));",
							"    return n !== Infinity && String(n) === str && n >= 0;",
							"}",
							"",
							"var response = pm.response.json();",
							"var moment = require('moment');",
							"console.log(\"Displaying : require('moment') : \" + moment);",
							"",
							"var timeStamp = pm.globals.get(\"timeStamp\");",
							"console.log(\"Displaying TimeStamp : \" + timeStamp);",
							"",
							"if (!timeStamp) { //create new Timestamp (now + 180 seconds)",
							"    timeStamp = moment().add(60, 'seconds');",
							"    pm.globals.set(\"timeStamp\", timeStamp);",
							"    console.log(\"New TimeStamp : \" + timeStamp);",
							"}",
							"",
							"",
							"if(pm.response.status == \"OK\")",
							"{",
							"    pm.test(\"Status code is 200, Successfully Deleted the Account\", function () {",
							"    pm.response.to.have.status(200);",
							"    });",
							"",
							"    pm.test(\"message: Property has to be present\", function (){",
							"    pm.expect(response).to.have.property('message');",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"    pm.expect(pm.response.text()).to.include(\"File deleted successfully\");",
							"    });",
							"    ",
							"}",
							"else if(pm.response.status == \"Bad Request\")",
							"{",
							"    if (moment() < moment(pm.globals.get(\"timeStamp\")))",
							"    {   ",
							"        postman.setNextRequest(\"Delete File\");",
							"    }",
							"    else",
							"    {",
							"        pm.test(\"Set time limit is exceeded\", function() {",
							"        pm.expect.fail();",
							"        });",
							"        console.log(\"Stopping tests...\");",
							"        pm.globals.unset(\"timeStamp\");",
							"    ",
							"        pm.test(\"error : Property has to be present\", function (){",
							"        pm.expect(response).to.have.property('error');",
							"        });",
							"",
							"        pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"Invalid file id\");",
							"        });",
							"",
							"        pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"File already deleted\");",
							"        });",
							"    }",
							"}",
							"else if(pm.response.status == \"Server Error\")",
							"{",
							"    pm.test(\"Status Code is 500: Server Error, Code is breaking/Runtime exception not being handled with appropriate error message\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"else if(pm.response.status == \"Unauthorized\")",
							"{",
							"    pm.test(\"Status Code is 401: Unauthorized, Login failed\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"else",
							"{",
							"    pm.test(\"Please check the inputs\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "c85ba277-ff1d-4acb-9c72-edf92782cfed",
						"exec": [
							"setTimeout(function(){}, 1000);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{URL}}/api/bsa/v2/file/{{FileId}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"bsa",
						"v2",
						"file",
						"{{FileId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Fetch File Detail",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "34d059a0-c2de-4fcb-b5f0-e53fa5b6f0cd",
						"exec": [
							"var response = pm.response.json();",
							"",
							"if(pm.response.status == \"OK\")",
							"{",
							"    pm.test(\"Status code is 200, Successfully fetched file details\", function () {",
							"    pm.response.to.have.status(200);",
							"    });",
							"",
							"    pm.test(\"fileId : Property has to be present in the response\", function (){",
							"    pm.expect(response).to.have.property('fileId');",
							"    });",
							"",
							"    pm.test(\"status : Property has to be present in the response\", function (){",
							"    pm.expect(response).to.have.property('status');",
							"    });",
							"",
							"    pm.test(\"originalName : Property has to be present in the response\", function (){",
							"    pm.expect(response).to.have.property('originalName');",
							"    });",
							"",
							"    pm.test(\"documentType : Property has to be present in the response\", function (){",
							"    pm.expect(response).to.have.property('documentType');",
							"    });",
							"",
							"    pm.test(\"password : Property has to be present in the response\", function (){",
							"    pm.expect(response).to.have.property('password');",
							"    });",
							"",
							"    pm.test(\"fromDate : Property has to be present in the response\", function (){",
							"    pm.expect(response).to.have.property('fromDate');",
							"    });",
							"",
							"    pm.test(\"tillDate : Property has to be present in the response\", function (){",
							"    pm.expect(response).to.have.property('tillDate');",
							"    });",
							"",
							"    pm.test(\"creatorName : Property has to be present in the response\", function (){",
							"    pm.expect(response).to.have.property('creatorName');",
							"    });",
							"",
							"    pm.test(\"producerName : Property has to be present in the response\", function (){",
							"    pm.expect(response).to.have.property('producerName');",
							"    });",
							"",
							"}",
							"else if(pm.response.status == \"Bad Request\")",
							"{",
							"    pm.test(\"Status code is 400, Failed to fetch file details\", function () {",
							"    pm.response.to.have.status(400);",
							"    });",
							"",
							"    pm.test(\"error : Property has to be present\", function (){",
							"    pm.expect(response).to.have.property('error');",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"    pm.expect(pm.response.text()).to.include(\"Invalid file id\");",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"    pm.expect(pm.response.text()).to.include(\"File Not Found\");",
							"    });",
							"}",
							"else if(pm.response.status == \"Server Error\")",
							"{",
							"    pm.test(\"Status Code is 500: Server Error, Code is breaking/Runtime exception not being handled with appropriate error message\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"else if(pm.response.status == \"Unauthorized\")",
							"{",
							"    pm.test(\"Status Code is 401: Unauthorized, Login failed\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"else",
							"{",
							"    pm.test(\"Please check the inputs\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/api/bsa/v2/file/{{FileId}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"bsa",
						"v2",
						"file",
						"{{FileId}}"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}