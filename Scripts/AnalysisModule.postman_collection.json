{
	"info": {
		"_postman_id": "92688e10-c08f-4d55-8361-9fc3cf924080",
		"name": "AnalysisModule",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authenticate",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "94192d9a-7e3e-4c06-b33d-65ff40194e07",
						"exec": [
							"",
							"var response = pm.response.json();",
							"",
							"//Set Token as global variable",
							"pm.globals.set(\"token\", response.token);",
							"",
							"",
							"pm.test(\"Authentication Successful\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Username : Property has to be present\", function (){",
							"    pm.expect(response).to.have.property('username');",
							"});",
							"pm.test(\"Username : Has to be string\", function (){",
							"    pm.expect(response.username).to.not.equal(null);",
							"    pm.expect(response.username).to.have.string;",
							"});",
							"pm.test(\"Token : Property has to be present\", function(){",
							"    pm.expect(response).to.have.property('token');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"username\":\"{{username}}\",\n\t\"password\":\"{{password}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api/auth/signin",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"auth",
						"signin"
					]
				}
			},
			"response": [
				{
					"name": "Authenticate",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\":\"user@finezza.in\",\n\t\"password\":\"password\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base-url}}:8091/api/auth/signin",
							"host": [
								"{{base-url}}"
							],
							"port": "8091",
							"path": [
								"api",
								"auth",
								"signin"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Tue, 23 Jun 2020 17:10:14 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-XSS-Protection",
							"value": "1; mode=block"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Expires",
							"value": "0"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						}
					],
					"cookie": [],
					"body": "{\n    \"username\": \"user@finezza.in\",\n    \"token\": \"eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyQGZpbmV6emEuaW4iLCJyb2xlcyI6WyJVU0VSIl0sImlhdCI6MTU5MjkzMjIxNCwiZXhwIjoxNTkyOTM1ODE0fQ.br2QuvgD7R7XNDAFJoPc1s5H4ejn0DGKuxzrUhgMLss\"\n}"
				}
			]
		},
		{
			"name": "Create Account",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e94f4be8-db5f-449a-bdc6-b21418d1ce3e",
						"exec": [
							"//Function to check if the number is integer",
							"function isNormalInteger(str) {",
							"    var n = Math.floor(Number(str));",
							"    return n !== Infinity && String(n) === str && n >= 0;",
							"}",
							"",
							"var response = pm.response.json();",
							"",
							"",
							"if(pm.response.status == \"Created\")",
							"{",
							"    pm.test(\"Status code is 201, Successfully Created the Account\", function () {",
							"    pm.response.to.have.status(201);",
							"    });",
							"    pm.globals.set(\"CreatedAccount\", response);",
							"    pm.globals.set(\"BankAccountId\", response.accountId);",
							"    pm.globals.set(\"AccountName\", response.accountName);",
							"    pm.globals.set(\"BankAccountNumber\", response.accountNumber);",
							"    pm.globals.set(\"AccountType\", response.accountType);",
							"    pm.globals.set(\"AccountTypeName\", response.accountTypeName);",
							"    pm.globals.set(\"BankId\", response.bankId);",
							"    pm.globals.set(\"BankName\", response.bankName);",
							"    pm.globals.set(\"AccountStatus\", response.status);",
							"    pm.globals.set(\"CallBackURL\", response.callbackUrl);",
							"    pm.globals.set(\"AccountReferenceNumber\", response.accountReferenceNumber);",
							" ",
							"",
							"    var schema = pm.globals.get(\"CreatedAccount\");",
							"",
							"    pm.test(\"Bank Account Id is \" + schema.accountId);",
							"    ",
							"    //Assertions to check if mandatory fields are empty",
							"    pm.test(\"Bank Account Id has to be string\", function () {",
							"        pm.expect(isNormalInteger(schema.accountId)).to.be.true;",
							"        pm.expect(schema.accountId).to.not.equal(null);",
							"        pm.expect(schema.accountId).to.not.be.empty;",
							"        });",
							"",
							"    pm.test(\"Account name has to be string\", function () {",
							"        pm.expect(schema.accountName).to.have.string;",
							"        pm.expect(schema.accountName).to.not.equal(null);",
							"        });",
							"",
							"    pm.test(\"Account number has to be a valid\", function () {",
							"        pm.expect(schema.accountNumber).to.have.string;",
							"        pm.expect(schema.accountNumber).to.not.equal(null);",
							"        });",
							"    ",
							"    pm.test(\"Account Type has to be a number\", function () {",
							"        pm.expect(schema.accountType).to.be.oneOf([\"1\", \"2\", \"3\", \"4\"]);",
							"        });",
							"    ",
							"    pm.test(\"AccountTypeName has to be a string\", function () {",
							"        pm.expect(schema.accountTypeName).to.have.string;",
							"        pm.expect(schema.accountTypeName).to.be.oneOf([\"Savings Account\",\"Current Account\",\"Overdraft Account\", \"Cash Credit Account\"]);",
							"        });",
							"    ",
							"    pm.test(\"Bank Id has to be a number\", function () {",
							"        pm.expect(schema.bankId).to.not.equal(null);",
							"        });",
							"",
							"    pm.test(\"Bank name has to be string\", function () {",
							"        pm.expect(schema.bankName).to.have.string;",
							"        pm.expect(schema.bankName).to.not.equal(null);",
							"        pm.expect(schema.bankName).to.not.be.empty;",
							"        });",
							"",
							"    pm.test(\"Account Status has to be string\", function () {",
							"        pm.expect(schema.status).to.have.string;",
							"        pm.expect(schema.status).to.not.equal(null);",
							"        });",
							"",
							"    pm.test(\"CallBackURL has to be string\", function () {",
							"        pm.expect(schema.callbackUrl).to.have.string;",
							"        pm.expect(schema.callbackUrl).to.not.equal(null);",
							"        pm.expect(schema.callbackUrl).to.not.be.empty;",
							"        });",
							"",
							"    pm.test(\"Account Reference Number has to be string\", function () {",
							"        pm.expect(schema.accountReferenceNumber).to.have.string;",
							"        pm.expect(schema.accountReferenceNumber).to.not.equal(null);",
							"        pm.expect(schema.accountReferenceNumber).to.not.be.empty;",
							"        });",
							"}",
							"",
							"else if(pm.response.status == \"Bad Request\")",
							"{",
							"    pm.test(\"error : Property has to be present\", function (){",
							"    pm.expect(response).to.have.property('error');",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"    pm.expect(pm.response.text()).to.include(\"Invalid bank id\");",
							"        });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"Invalid account type\");",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"JSON parse error....\");",
							"    });",
							"",
							"}",
							"",
							"else if(pm.response.status == \"Server Error\")",
							"{",
							"    pm.test(\"Status Code is 500: Server Error, Code is breaking/Runtime exception not being handled with appropriate error message\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"",
							"else if(pm.response.status == \"Unauthorized\")",
							"{",
							"    pm.test(\"Status Code is 401: Unauthorized, Login failed\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"",
							"else",
							"{",
							"    pm.test(\"Please check the inputs\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"bankId\": \"{{bankId}}\",\n   \"accountType\": \"{{accountType}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api/bsa/v2/account",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"bsa",
						"v2",
						"account"
					]
				},
				"description": "To create a new account, users will pass mandatory fields highlighted in the request body. It can also send in group Id to map it to a group. If a group Id is passed in an api request but is not present, then it will create a new group and map it to a new account.\nSimilarly accountReferenceNumber can be passed by clients to map the account details. If not passed it will create one and send it back in response.\nIt is synchronized api, on success the response will have a new account object in response."
			},
			"response": [
				{
					"name": "Create Account",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"accountNumber\": \"34-9221\",\n   \"bankId\": 9,\n   \"accountType\": 1,\n   \"referenceId\": \"N92389129\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base-url}}:8091/api/bsa/v2/account",
							"host": [
								"{{base-url}}"
							],
							"port": "8091",
							"path": [
								"api",
								"bsa",
								"v2",
								"account"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Wed, 24 Jun 2020 05:16:23 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-XSS-Protection",
							"value": "1; mode=block"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Expires",
							"value": "0"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						}
					],
					"cookie": [],
					"body": "{\n    \"accountId\": 3,\n    \"accountName\": \"\",\n    \"accountNumber\": \"34-9221\",\n    \"accountType\": 1,\n    \"accountTypeName\": \"Savings Account\",\n    \"bankId\": 9,\n    \"bankName\": \"ICICI Bank\",\n    \"status\": \"New\",\n    \"callbackUrl\": \"\",\n    \"referenceId\": \"N92389129\"\n}"
				}
			]
		},
		{
			"name": "Upload Statements",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2dd3d712-9d87-4a58-8861-596a5f072803",
						"exec": [
							"//Function to check if the number is integer",
							"function isNormalInteger(str) {",
							"    var n = Math.floor(Number(str));",
							"    return n !== Infinity && String(n) === str && n >= 0;",
							"}",
							"",
							"var response = pm.response.json();",
							"",
							"if(pm.response.status == \"OK\")",
							"{",
							"    pm.test(\"Status code is 200, Successfully Created the Account\", function () {",
							"    pm.response.to.have.status(200);",
							"    });",
							"",
							"    pm.test(\"accountId : Property has to be present\", function (){",
							"    pm.expect(response).to.have.property('accountId');",
							"    });",
							"",
							"    pm.test(\"accountReferenceNumber : Property has to be present\", function (){",
							"    pm.expect(response).to.have.property('accountReferenceNumber');",
							"    });",
							"",
							"    pm.test(\"success : Property has to be present\", function (){",
							"    pm.expect(response).to.have.property('success');",
							"    });",
							"",
							"    pm.test(\"failed : Property has to be present\", function (){",
							"    pm.expect(response).to.have.property('failed');",
							"    });",
							"",
							"    if(response.success[0]){",
							"",
							"        pm.test(\"originalName : Property has to be present success array of objects\", function (){",
							"        pm.expect(response.success[0]).to.have.property('originalName');",
							"        });",
							"",
							"        pm.test(\"documentType : Property has to be present success array of objects\", function (){",
							"        pm.expect(response.success[0]).to.have.property('documentType');",
							"        });",
							"",
							"        pm.test(\"fileId : Property has to be present success array of objects\", function (){",
							"        pm.expect(response.success[0]).to.have.property('fileId');",
							"        });",
							"",
							"        //Setting file id as global variable",
							"        pm.globals.set(\"FileId\", response.success[0].fileId);",
							"",
							"        pm.test(\"password : Property has to be present for the password protected files\", function (){",
							"        pm.expect(response.success[0]).to.have.property('password');",
							"        pm.globals.set(\"FilePassword\", response.success[0].password);",
							"        });",
							"    }",
							"    else if(response.failed[0]){",
							"    ",
							"        pm.test(\"originalName : Property has to be present failed array of objects\", function (){",
							"        pm.expect(response.failed[0]).to.have.property('originalName');",
							"        });",
							"",
							"        pm.test(\"password : Property has to be present failed array of objects\", function (){",
							"        pm.expect(response.failed[0]).to.have.property('password');",
							"        });",
							"",
							"        pm.test(\"errorMessage : Property has to be present failed array of objects\", function (){",
							"        pm.expect(response).to.have.property('errorMessage');",
							"        });",
							"",
							"    }",
							"}",
							"else if(pm.response.status == \"Bad Request\")",
							"{",
							"    pm.test(\"errorMessage : Property has to be present\", function (){",
							"    pm.expect(response).to.have.property('errorMessage');",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"    pm.expect(pm.response.text()).to.include(\"Incorrect bank statement\");",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"No such account id found\");",
							"    });",
							"}",
							"",
							"else if(pm.response.status == \"Server Error\")",
							"{",
							"    pm.test(\"Status Code is 500: Server Error, Code is breaking/Runtime exception not being handled with appropriate error message\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"",
							"else if(pm.response.status == \"Unauthorized\")",
							"{",
							"    pm.test(\"Status Code is 401: Unauthorized, Login failed\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"",
							"else",
							"{",
							"    pm.test(\"Please check the inputs\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": "{{file}}"
						}
					],
					"options": {
						"formdata": {}
					}
				},
				"url": {
					"raw": "{{URL}}/api/bsa/v2/file/upload?accountReferenceNumber={{AccountReferenceNumber}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"bsa",
						"v2",
						"file",
						"upload"
					],
					"query": [
						{
							"key": "accountId",
							"value": "759",
							"disabled": true
						},
						{
							"key": "accountNumber",
							"value": "AB83934",
							"disabled": true
						},
						{
							"key": "password",
							"value": "7000569412",
							"disabled": true
						},
						{
							"key": "validate",
							"value": "no",
							"disabled": true
						},
						{
							"key": "account",
							"value": null,
							"disabled": true
						},
						{
							"key": "accountReferenceNumber",
							"value": "{{AccountReferenceNumber}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Fetch Summary",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c20fe29f-60ba-4416-86f9-49fbe0b07c7f",
						"exec": [
							"var response = pm.response.json();",
							"",
							"var moment = require('moment');",
							"console.log(\"Displaying : require('moment') : \" + moment);",
							"",
							"var timeStamp = pm.globals.get(\"timeStamp\");",
							"console.log(\"Displaying TimeStamp : \" + timeStamp);",
							"",
							"if (!timeStamp) { //create new Timestamp (now + 180 seconds)",
							"    timeStamp = moment().add(120, 'seconds');",
							"    pm.globals.set(\"timeStamp\", timeStamp);",
							"    console.log(\"New TimeStamp : \" + timeStamp);",
							"}",
							"",
							"if(pm.response.status == \"OK\")",
							"{ ",
							"        ",
							"        pm.test(\"Status code is 200, Successfully fetched summary\", function () {",
							"        pm.response.to.have.status(200);",
							"        });",
							"",
							"        pm.test(\"summary : Property has to be present\", function (){",
							"        pm.expect(response).to.have.property('summary');",
							"        });",
							"",
							"        pm.test(\"date : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('date');",
							"        });",
							"",
							"        pm.test(\"total_inflow : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('total_inflow');",
							"        });",
							"",
							"        pm.test(\"inflow_count : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('inflow_count');",
							"        });",
							"",
							"        pm.test(\"total_outflow : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('total_outflow');",
							"        });",
							"",
							"        pm.test(\"outflow_count : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('outflow_count');",
							"        });",
							"",
							"        pm.test(\"total_delta : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('total_delta');",
							"        });",
							"",
							"        pm.test(\"daily_average_balance : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('daily_average_balance');",
							"        });",
							"",
							"        pm.test(\"total_emi : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('total_emi');",
							"        });",
							"",
							"        pm.test(\"emi_count : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('emi_count');",
							"        });",
							"",
							"        pm.test(\"total_cash_inflow : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('total_cash_inflow');",
							"        });",
							"        ",
							"        pm.test(\"cash_inflow_count : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('cash_inflow_count');",
							"        });",
							"",
							"        pm.test(\"total_cash_outflow : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('total_cash_outflow');",
							"        });",
							"",
							"        pm.test(\"cash_outflow_count : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('cash_outflow_count');",
							"        });",
							"",
							"        pm.test(\"total_biz_inflow : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('total_biz_inflow');",
							"        });",
							"",
							"        pm.test(\"biz_inflow_count : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('biz_inflow_count');",
							"        });",
							"",
							"        pm.test(\"total_biz_outflow : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('total_biz_outflow');",
							"        });",
							"",
							"        pm.test(\"biz_outflow_count : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('biz_outflow_count');",
							"        });",
							"",
							"        pm.test(\"central_credit_day : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('central_credit_day');",
							"        });",
							"",
							"        pm.test(\"central_debit_day : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('central_debit_day');",
							"        });",
							"",
							"        pm.test(\"start_date : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('start_date');",
							"        pm.globals.set(\"start_date\", response.summary[0].start_date);",
							"        });",
							"",
							"        pm.test(\"end_date : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('end_date');",
							"        pm.globals.set(\"end_date\", response.summary[0].end_date);",
							"        });",
							"",
							"        pm.test(\"account_id : Property has to be present in Summary object\", function (){",
							"        pm.expect(response.summary[0]).to.have.property('account_id');",
							"        });",
							"    ",
							"}",
							"else if(pm.response.status == \"Bad Request\")",
							"{",
							"    if (moment() < moment(pm.globals.get(\"timeStamp\")))",
							"    {   ",
							"        postman.setNextRequest(\"Fetch Summary\");",
							"    }",
							"    else",
							"    {",
							"        pm.test(\"Set time limit is exceeded\", function() {",
							"            pm.expect.fail();",
							"         });",
							"        console.log(\"Stopping tests...\");",
							"        postman.setNextRequest(null);",
							"        pm.globals.unset(\"timeStamp\");",
							"",
							"        pm.test(\"Status code is 400, Failed to fetch summary\", function () {",
							"        pm.response.to.have.status(400);",
							"        });",
							"",
							"        pm.test(\"error : Property has to be present\", function (){",
							"        pm.expect(response).to.have.property('error');",
							"        });",
							"",
							"        pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"Invalid bank account id\");",
							"        });",
							"",
							"        pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"Invalid account reference number\");",
							"        });",
							"",
							"        pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"More than one account id/account reference number found in request parameter\");",
							"        });",
							"",
							"        pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"Anyone is mandatory, Account id or Account reference number\");",
							"        });",
							"    }",
							"",
							"}",
							"else if(pm.response.status == \"Server Error\")",
							"{",
							"    pm.test(\"Status Code is 500: Server Error, Code is breaking/Runtime exception not being handled with appropriate error message\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"else if(pm.response.status == \"Unauthorized\")",
							"{",
							"    pm.test(\"Status Code is 401: Unauthorized, Login failed\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"else",
							"{",
							"    pm.test(\"Please check the inputs\", function(){",
							"    pm.expect.fail();",
							"    });",
							"}",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "3eb771c6-a1a3-4d44-b6f0-15d5c866a9b2",
						"exec": [
							"setTimeout(function(){}, 1000);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"accountReferenceNumber\":\"{{AccountReferenceNumber}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api/bsa/v2/analysis/summary?accountReferenceNumber={{AccountReferenceNumber}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"bsa",
						"v2",
						"analysis",
						"summary"
					],
					"query": [
						{
							"key": "type",
							"value": "credit",
							"disabled": true
						},
						{
							"key": "accountReferenceNumber",
							"value": "{{AccountReferenceNumber}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Fetch Patterns",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7b6803e6-1f43-48df-9a8a-5199cc72e4ef",
						"exec": [
							"var response = pm.response.json();",
							"",
							"if(pm.response.status == \"OK\")",
							"{",
							"    pm.test(\"Status code is 200, Successfully fetched counterparty\", function () {",
							"    pm.response.to.have.status(200);",
							"    });",
							"",
							"    pm.test(\"patterns : Property has to be present in the response\", function (){",
							"    pm.expect(response).to.have.property('patterns');",
							"    });",
							"",
							"    pm.test(\"start_date : Property has to be present in patterns object\", function (){",
							"    pm.expect(response.patterns[0]).to.have.property('start_date');",
							"    });",
							"",
							"    pm.test(\"end_date : Property has to be present in patterns object\", function (){",
							"    pm.expect(response.patterns[0]).to.have.property('end_date');",
							"    });",
							"",
							"    pm.test(\"amount : Property has to be present in patterns object\", function (){",
							"    pm.expect(response.patterns[0]).to.have.property('amount');",
							"    });",
							"",
							"    pm.test(\"frequency : Property has to be present in patterns object\", function (){",
							"    pm.expect(response.patterns[0]).to.have.property('frequency');",
							"    });",
							"",
							"    pm.test(\"counterparty : Property has to be present in patterns object\", function (){",
							"    pm.expect(response.patterns[0]).to.have.property('counterparty');",
							"    });",
							"",
							"    pm.test(\"particular : Property has to be present in patterns object\", function (){",
							"    pm.expect(response.patterns[0]).to.have.property('particular');",
							"    });",
							"",
							"    pm.test(\"account_id : Property has to be present in patterns object\", function (){",
							"    pm.expect(response.patterns[0]).to.have.property('account_id');",
							"    });",
							"",
							"    pm.test(\"details : Property has to be present in patterns object\", function (){",
							"    pm.expect(response.patterns[0]).to.have.property('details');",
							"    });",
							"",
							"    pm.test(\"transaction_date : Property has to be present in details object\", function (){",
							"    pm.expect(response.patterns[0].details[0]).to.have.property('transaction_date');",
							"    });",
							"",
							"    pm.test(\"amount : Property has to be present in details object\", function (){",
							"    pm.expect(response.patterns[0].details[0]).to.have.property('amount');",
							"    });",
							"",
							"    pm.test(\"counterparty : Property has to be present in details object\", function (){",
							"    pm.expect(response.patterns[0].details[0]).to.have.property('counterparty');",
							"    });",
							"",
							"    pm.test(\"particular : Property has to be present in details object\", function (){",
							"    pm.expect(response.patterns[0].details[0]).to.have.property('particular');",
							"    });",
							"",
							"    pm.test(\"id : Property has to be present in details object\", function (){",
							"    pm.expect(response.patterns[0].details[0]).to.have.property('id');",
							"    });",
							"",
							"    pm.test(\"months : Property has to be present in details object\", function (){",
							"    pm.expect(response.patterns[0].details[0]).to.have.property('months');",
							"    });",
							"}",
							"else if(pm.response.status == \"Bad Request\")",
							"{",
							"    pm.test(\"Status code is 400, Failed to fetch patterns\", function () {",
							"    pm.response.to.have.status(400);",
							"    });",
							"",
							"    pm.test(\"error : Property has to be present\", function (){",
							"    pm.expect(response).to.have.property('error');",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"    pm.expect(pm.response.text()).to.include(\"Invalid bank account id\");",
							"        });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"Invalid account reference number\");",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"    pm.expect(pm.response.text()).to.include(\"More than one account id/account reference number found in request parameter\");",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"    pm.expect(pm.response.text()).to.include(\"Anyone is mandatory, Account id or Account reference number\");",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"    pm.expect(pm.response.text()).to.include(\"Invalid type, accepted type is emi\");",
							"    });",
							"",
							"}",
							"else if(pm.response.status == \"Server Error\")",
							"{",
							"    pm.test(\"Status Code is 500: Server Error, Code is breaking/Runtime exception not being handled with appropriate error message\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"else if(pm.response.status == \"Unauthorized\")",
							"{",
							"    pm.test(\"Status Code is 401: Unauthorized, Login failed\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"else",
							"{",
							"    pm.test(\"Please check the inputs\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api/bsa/v2/analysis/patterns?accountReferenceNumber={{AccountReferenceNumber}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"bsa",
						"v2",
						"analysis",
						"patterns"
					],
					"query": [
						{
							"key": "accountReferenceNumber",
							"value": "{{AccountReferenceNumber}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Fetch CounterParty",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f894e597-884a-4877-b643-1f43899e6097",
						"exec": [
							"var response = pm.response.json();",
							"",
							"if(pm.response.status == \"OK\")",
							"{",
							"    pm.test(\"Status code is 200, Successfully fetched counterparty\", function () {",
							"    pm.response.to.have.status(200);",
							"    });",
							"",
							"    pm.test(\"counterparty : Property has to be present in the response\", function (){",
							"    pm.expect(response).to.have.property('counterparty');",
							"    });",
							"",
							"    pm.test(\"credit : Property has to be present in counterparty object\", function (){",
							"    pm.expect(response.counterparty).to.have.property('credit');",
							"    });",
							"",
							"    pm.test(\"counterparty : Property has to be present in credit object\", function (){",
							"    pm.expect(response.counterparty.credit[0]).to.have.property('counterparty');",
							"    });",
							"",
							"    pm.test(\"amount : Property has to be present in credit object\", function (){",
							"    pm.expect(response.counterparty.credit[0]).to.have.property('amount');",
							"    });",
							"",
							"    pm.test(\"number_of_transactions : Property has to be present in credit object\", function (){",
							"    pm.expect(response.counterparty.credit[0]).to.have.property('number_of_transactions');",
							"    });",
							"",
							"    pm.test(\"pct_of_total : Property has to be present in credit object\", function (){",
							"    pm.expect(response.counterparty.credit[0]).to.have.property('pct_of_total');",
							"    });",
							"",
							"    pm.test(\"account_id : Property has to be present in credit object\", function (){",
							"    pm.expect(response.counterparty.credit[0]).to.have.property('account_id');",
							"    });",
							"",
							"    pm.test(\"debit : Property has to be present in counterparty object\", function (){",
							"    pm.expect(response.counterparty).to.have.property('debit');",
							"    });",
							"",
							"    pm.test(\"counterparty : Property has to be present in debit object\", function (){",
							"    pm.expect(response.counterparty.debit[0]).to.have.property('counterparty');",
							"    });",
							"",
							"    pm.test(\"amount : Property has to be present in debit object\", function (){",
							"    pm.expect(response.counterparty.debit[0]).to.have.property('amount');",
							"    });",
							"",
							"    pm.test(\"number_of_transactions : Property has to be present in debit object\", function (){",
							"    pm.expect(response.counterparty.debit[0]).to.have.property('number_of_transactions');",
							"    });",
							"",
							"    pm.test(\"pct_of_total : Property has to be present in debit object\", function (){",
							"    pm.expect(response.counterparty.debit[0]).to.have.property('pct_of_total');",
							"    });",
							"",
							"    pm.test(\"account_id : Property has to be present in debit object\", function (){",
							"    pm.expect(response.counterparty.debit[0]).to.have.property('account_id');",
							"    });",
							"",
							"",
							"}",
							"else if(pm.response.status == \"Bad Request\")",
							"{",
							"    pm.test(\"Status code is 400, Failed to fetch summary\", function () {",
							"    pm.response.to.have.status(400);",
							"    });",
							"",
							"    pm.test(\"error : Property has to be present\", function (){",
							"    pm.expect(response).to.have.property('error');",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"    pm.expect(pm.response.text()).to.include(\"Invalid bank account id\");",
							"        });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"Invalid account reference number\");",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"    pm.expect(pm.response.text()).to.include(\"More than one account id/account reference number found in request parameter\");",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"    pm.expect(pm.response.text()).to.include(\"Anyone is mandatory, Account id or Account reference number\");",
							"    });",
							"",
							"}",
							"else if(pm.response.status == \"Server Error\")",
							"{",
							"    pm.test(\"Status Code is 500: Server Error, Code is breaking/Runtime exception not being handled with appropriate error message\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"else if(pm.response.status == \"Unauthorized\")",
							"{",
							"    pm.test(\"Status Code is 401: Unauthorized, Login failed\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"else",
							"{",
							"    pm.test(\"Please check the inputs\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/api/bsa/v2/analysis/counterparty?accountReferenceNumber={{AccountReferenceNumber}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"bsa",
						"v2",
						"analysis",
						"counterparty"
					],
					"query": [
						{
							"key": "accountReferenceNumber",
							"value": "{{AccountReferenceNumber}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Fetch ChequeReturn",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9b4fc8f1-a4d5-41c2-bc47-499184c12133",
						"exec": [
							"var response = pm.response.json();",
							"",
							"if(pm.response.status == \"OK\")",
							"{",
							"    pm.test(\"Status code is 200, Successfully fetched counterparty\", function () {",
							"    pm.response.to.have.status(200);",
							"    });",
							"",
							"    pm.test(\"chequereturn : Property has to be present in the response\", function (){",
							"    pm.expect(response).to.have.property('chequereturn');",
							"    });",
							"",
							"    pm.test(\"outwards : Property has to be present in chequereturn object\", function (){",
							"    pm.expect(response.chequereturn).to.have.property('outwards');",
							"    });",
							"",
							"    if(response.chequereturn.outwards[0]){",
							"",
							"        pm.test(\"date : Property has to be present in outwards object\", function (){",
							"        pm.expect(response.chequereturn.outwards[0]).to.have.property('date');",
							"        });",
							"",
							"        pm.test(\"particular : Property has to be present in outwards object\", function (){",
							"        pm.expect(response.chequereturn.outwards[0]).to.have.property('particular');",
							"        });",
							"",
							"        pm.test(\"type : Property has to be present in outwards object\", function (){",
							"        pm.expect(response.chequereturn.outwards[0]).to.have.property('type');",
							"        });",
							"",
							"        pm.test(\"amount : Property has to be present in outwards object\", function (){",
							"        pm.expect(response.chequereturn.outwards[0]).to.have.property('amount');",
							"        });",
							"",
							"        pm.test(\"balance : Property has to be present in outwards object\", function (){",
							"        pm.expect(response.chequereturn.outwards[0]).to.have.property('balance');",
							"        });",
							"",
							"        pm.test(\"tags : Property has to be present in outwards object\", function (){",
							"        pm.expect(response.chequereturn.outwards[0]).to.have.property('tags');",
							"        });",
							"",
							"        pm.test(\"account_id : Property has to be present in outwards object\", function (){",
							"        pm.expect(response.chequereturn.outwards[0]).to.have.property('account_id');",
							"        });",
							"",
							"        pm.test(\"honoured_date : Property has to be present in outwards object\", function (){",
							"        pm.expect(response.chequereturn.outwards[0]).to.have.property('honoured_date');",
							"        });",
							"    }",
							"",
							"        pm.test(\"inwards : Property has to be present in chequereturn object\", function (){",
							"        pm.expect(response.chequereturn).to.have.property('inwards');",
							"        });",
							"",
							"",
							"    if(response.chequereturn.inwards[0]){",
							"",
							"        pm.test(\"date : Property has to be present in outwards object\", function (){",
							"        pm.expect(response.chequereturn.inwards[0]).to.have.property('date');",
							"        });",
							"",
							"        pm.test(\"particular : Property has to be present in outwards object\", function (){",
							"        pm.expect(response.chequereturn.inwards[0]).to.have.property('particular');",
							"        });",
							"",
							"        pm.test(\"type : Property has to be present in outwards object\", function (){",
							"        pm.expect(response.chequereturn.inwards[0]).to.have.property('type');",
							"        });",
							"",
							"        pm.test(\"amount : Property has to be present in outwards object\", function (){",
							"        pm.expect(response.chequereturn.inwards[0]).to.have.property('amount');",
							"        });",
							"",
							"        pm.test(\"balance : Property has to be present in outwards object\", function (){",
							"        pm.expect(response.chequereturn.inwards[0]).to.have.property('balance');",
							"        });",
							"",
							"        pm.test(\"tags : Property has to be present in outwards object\", function (){",
							"        pm.expect(response.chequereturn.inwards[0]).to.have.property('tags');",
							"        });",
							"",
							"        pm.test(\"account_id : Property has to be present in outwards object\", function (){",
							"        pm.expect(response.chequereturn.inwards[0]).to.have.property('account_id');",
							"        });",
							"",
							"        pm.test(\"honoured_date : Property has to be present in outwards object\", function (){",
							"        pm.expect(response.chequereturn.inwards[0]).to.have.property('honoured_date');",
							"        });",
							"    }",
							"}",
							"else if(pm.response.status == \"Bad Request\")",
							"{",
							"    pm.test(\"Status code is 400, Failed to fetch summary\", function () {",
							"    pm.response.to.have.status(400);",
							"    });",
							"",
							"    pm.test(\"error : Property has to be present\", function (){",
							"    pm.expect(response).to.have.property('error');",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"    pm.expect(pm.response.text()).to.include(\"Invalid bank account id\");",
							"        });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"Invalid account reference number\");",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"    pm.expect(pm.response.text()).to.include(\"More than one account id/account reference number found in request parameter\");",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"    pm.expect(pm.response.text()).to.include(\"Anyone is mandatory, Account id or Account reference number\");",
							"    });",
							"",
							"",
							"}",
							"else if(pm.response.status == \"Server Error\")",
							"{",
							"    pm.test(\"Status Code is 500: Server Error, Code is breaking/Runtime exception not being handled with appropriate error message\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"else if(pm.response.status == \"Unauthorized\")",
							"{",
							"    pm.test(\"Status Code is 401: Unauthorized, Login failed\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"else",
							"{",
							"    pm.test(\"Please check the inputs\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/api/bsa/v2/analysis/chequereturn?accountReferenceNumber={{AccountReferenceNumber}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"bsa",
						"v2",
						"analysis",
						"chequereturn"
					],
					"query": [
						{
							"key": "accountReferenceNumber",
							"value": "{{AccountReferenceNumber}}"
						},
						{
							"key": "type",
							"value": "inwards",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Fetch Top Transactions",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ccf71e53-2b89-4360-9632-254318d17c6e",
						"exec": [
							"var response = pm.response.json();",
							"",
							"if(pm.response.status == \"OK\")",
							"{",
							"    pm.test(\"Status code is 200, Successfully fetched counterparty\", function () {",
							"    pm.response.to.have.status(200);",
							"    });",
							"",
							"    pm.test(\"transactions : Property has to be present in the response\", function (){",
							"    pm.expect(response).to.have.property('transactions');",
							"    });",
							"",
							"    pm.test(\"credit : Property has to be present in transactions object\", function (){",
							"    pm.expect(response.transactions).to.have.property('credit');",
							"    });",
							"",
							"    pm.test(\"id : Property has to be present in credit object\", function (){",
							"    pm.expect(response.transactions.credit[0]).to.have.property('id');",
							"    });",
							"",
							"    pm.test(\"file_id : Property has to be present in credit object\", function (){",
							"    pm.expect(response.transactions.credit[0]).to.have.property('file_id');",
							"    });",
							"",
							"    pm.test(\"account_no : Property has to be present in credit object\", function (){",
							"    pm.expect(response.transactions.credit[0]).to.have.property('account_no');",
							"    });",
							"",
							"    pm.test(\"date : Property has to be present in credit object\", function (){",
							"    pm.expect(response.transactions.credit[0]).to.have.property('date');",
							"    });",
							"",
							"    pm.test(\"amount : Property has to be present in credit object\", function (){",
							"    pm.expect(response.transactions.credit[0]).to.have.property('amount');",
							"    });",
							"",
							"    pm.test(\"particular : Property has to be present in credit object\", function (){",
							"    pm.expect(response.transactions.credit[0]).to.have.property('particular');",
							"    });",
							"",
							"    pm.test(\"counterparty : Property has to be present in credit object\", function (){",
							"    pm.expect(response.transactions.credit[0]).to.have.property('counterparty');",
							"    });",
							"",
							"    pm.test(\"verified_counterparty : Property has to be present in credit object\", function (){",
							"    pm.expect(response.transactions.credit[0]).to.have.property('verified_counterparty');",
							"    });",
							"",
							"    pm.test(\"transaction_type : Property has to be present in credit object\", function (){",
							"    pm.expect(response.transactions.credit[0]).to.have.property('transaction_type');",
							"    });",
							"",
							"    pm.test(\"tags : Property has to be present in credit object\", function (){",
							"    pm.expect(response.transactions.credit[0]).to.have.property('tags');",
							"    });",
							"",
							"    pm.test(\"balance : Property has to be present in credit object\", function (){",
							"    pm.expect(response.transactions.credit[0]).to.have.property('balance');",
							"    });",
							"",
							"    pm.test(\"modified_tags : Property has to be present in credit object\", function (){",
							"    pm.expect(response.transactions.credit[0]).to.have.property('modified_tags');",
							"    });",
							"",
							"    pm.test(\"gap : Property has to be present in credit object\", function (){",
							"    pm.expect(response.transactions.credit[0]).to.have.property('gap');",
							"    });",
							"",
							"    pm.test(\"computed_balance : Property has to be present in credit object\", function (){",
							"    pm.expect(response.transactions.credit[0]).to.have.property('computed_balance');",
							"    });",
							"",
							"    pm.test(\"account_id : Property has to be present in credit object\", function (){",
							"    pm.expect(response.transactions.credit[0]).to.have.property('account_id');",
							"    });",
							"",
							"    pm.test(\"average : Property has to be present in credit object\", function (){",
							"    pm.expect(response.transactions.credit[0]).to.have.property('average');",
							"    });",
							"",
							"    pm.test(\"amount_per_average : Property has to be present in credit object\", function (){",
							"    pm.expect(response.transactions.credit[0]).to.have.property('amount_per_average');",
							"    });",
							"",
							"    pm.test(\"median : Property has to be present in credit object\", function (){",
							"    pm.expect(response.transactions.credit[0]).to.have.property('median');",
							"    });",
							"",
							"    pm.test(\"amount_per_median : Property has to be present in credit object\", function (){",
							"    pm.expect(response.transactions.credit[0]).to.have.property('amount_per_median');",
							"    });",
							"",
							"    pm.test(\"debit : Property has to be present in transactions object\", function (){",
							"    pm.expect(response.transactions).to.have.property('debit');",
							"    });",
							"",
							"      pm.test(\"id : Property has to be present in debit object\", function (){",
							"    pm.expect(response.transactions.debit[0]).to.have.property('id');",
							"    });",
							"",
							"    pm.test(\"file_id : Property has to be present in debit object\", function (){",
							"    pm.expect(response.transactions.debit[0]).to.have.property('file_id');",
							"    });",
							"",
							"    pm.test(\"account_no : Property has to be present in debit object\", function (){",
							"    pm.expect(response.transactions.debit[0]).to.have.property('account_no');",
							"    });",
							"",
							"    pm.test(\"date : Property has to be present in debit object\", function (){",
							"    pm.expect(response.transactions.debit[0]).to.have.property('date');",
							"    });",
							"",
							"    pm.test(\"amount : Property has to be present in debit object\", function (){",
							"    pm.expect(response.transactions.debit[0]).to.have.property('amount');",
							"    });",
							"",
							"    pm.test(\"particular : Property has to be present in debit object\", function (){",
							"    pm.expect(response.transactions.debit[0]).to.have.property('particular');",
							"    });",
							"",
							"    pm.test(\"counterparty : Property has to be present in debit object\", function (){",
							"    pm.expect(response.transactions.debit[0]).to.have.property('counterparty');",
							"    });",
							"",
							"    pm.test(\"verified_counterparty : Property has to be present in debit object\", function (){",
							"    pm.expect(response.transactions.debit[0]).to.have.property('verified_counterparty');",
							"    });",
							"",
							"    pm.test(\"transaction_type : Property has to be present in debit object\", function (){",
							"    pm.expect(response.transactions.debit[0]).to.have.property('transaction_type');",
							"    });",
							"",
							"    pm.test(\"tags : Property has to be present in debit object\", function (){",
							"    pm.expect(response.transactions.debit[0]).to.have.property('tags');",
							"    });",
							"",
							"    pm.test(\"balance : Property has to be present in debit object\", function (){",
							"    pm.expect(response.transactions.debit[0]).to.have.property('balance');",
							"    });",
							"",
							"    pm.test(\"modified_tags : Property has to be present in debit object\", function (){",
							"    pm.expect(response.transactions.debit[0]).to.have.property('modified_tags');",
							"    });",
							"",
							"    pm.test(\"gap : Property has to be present in debit object\", function (){",
							"    pm.expect(response.transactions.debit[0]).to.have.property('gap');",
							"    });",
							"",
							"    pm.test(\"computed_balance : Property has to be present in debit object\", function (){",
							"    pm.expect(response.transactions.debit[0]).to.have.property('computed_balance');",
							"    });",
							"",
							"    pm.test(\"account_id : Property has to be present in debit object\", function (){",
							"    pm.expect(response.transactions.debit[0]).to.have.property('account_id');",
							"    });",
							"",
							"    pm.test(\"average : Property has to be present in debit object\", function (){",
							"    pm.expect(response.transactions.debit[0]).to.have.property('average');",
							"    });",
							"",
							"    pm.test(\"amount_per_average : Property has to be present in debit object\", function (){",
							"    pm.expect(response.transactions.debit[0]).to.have.property('amount_per_average');",
							"    });",
							"",
							"    pm.test(\"median : Property has to be present in debit object\", function (){",
							"    pm.expect(response.transactions.debit[0]).to.have.property('median');",
							"    });",
							"",
							"    pm.test(\"amount_per_median : Property has to be present in debit object\", function (){",
							"    pm.expect(response.transactions.debit[0]).to.have.property('amount_per_median');",
							"    });",
							"",
							"",
							"}",
							"else if(pm.response.status == \"Bad Request\")",
							"{",
							"    pm.test(\"Status code is 400, Failed to fetch summary\", function () {",
							"    pm.response.to.have.status(400);",
							"    });",
							"",
							"    pm.test(\"error : Property has to be present\", function (){",
							"    pm.expect(response).to.have.property('error');",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"    pm.expect(pm.response.text()).to.include(\"Invalid bank account id\");",
							"        });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"Invalid account reference number\");",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"    pm.expect(pm.response.text()).to.include(\"More than one account id/account reference number found in request parameter\");",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"    pm.expect(pm.response.text()).to.include(\"Anyone is mandatory, Account id or Account reference number\");",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"    pm.expect(pm.response.text()).to.include(\"Invalid type, accepted type is credit or debit\");",
							"    });",
							"",
							"}",
							"else if(pm.response.status == \"Server Error\")",
							"{",
							"    pm.test(\"Status Code is 500: Server Error, Code is breaking/Runtime exception not being handled with appropriate error message\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"else if(pm.response.status == \"Unauthorized\")",
							"{",
							"    pm.test(\"Status Code is 401: Unauthorized, Login failed\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"else",
							"{",
							"    pm.test(\"Please check the inputs\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/api/bsa/v2/analysis/toptransactions?accountReferenceNumber={{AccountReferenceNumber}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"bsa",
						"v2",
						"analysis",
						"toptransactions"
					],
					"query": [
						{
							"key": "accountId",
							"value": "759",
							"disabled": true
						},
						{
							"key": "accountReferenceNumber",
							"value": "{{AccountReferenceNumber}}"
						},
						{
							"key": "type",
							"value": "credit",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Fetch Trends",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9c525beb-dea9-4b9f-92cc-93bb31199e26",
						"exec": [
							"var response = pm.response.json();",
							"",
							"if(pm.response.status == \"OK\")",
							"{",
							"    pm.test(\"Status code is 200, Successfully fetched trends\", function () {",
							"    pm.response.to.have.status(200);",
							"    });",
							"",
							"    pm.test(\"trends : Property has to be present in the response\", function (){",
							"    pm.expect(response).to.have.property('trends');",
							"    });",
							"",
							"    pm.test(\"duration : Property has to be present in trends object\", function (){",
							"    pm.expect(response.trends[0]).to.have.property('duration');",
							"    });",
							"",
							"    pm.test(\"average_daily_balance : Property has to be present in trends object\", function (){",
							"    pm.expect(response.trends[0]).to.have.property('average_daily_balance');",
							"    });",
							"",
							"    pm.test(\"total_inflow : Property has to be present in trends object\", function (){",
							"    pm.expect(response.trends[0]).to.have.property('total_inflow');",
							"    });",
							"",
							"    pm.test(\"total_outflow : Property has to be present in trends object\", function (){",
							"    pm.expect(response.trends[0]).to.have.property('total_outflow');",
							"    });",
							"",
							"    pm.test(\"total_biz_inflow : Property has to be present in trends object\", function (){",
							"    pm.expect(response.trends[0]).to.have.property('total_biz_inflow');",
							"    });",
							"",
							"    pm.test(\"total_biz_outflow : Property has to be present in trends object\", function (){",
							"    pm.expect(response.trends[0]).to.have.property('total_biz_outflow');",
							"    });",
							"",
							"    pm.test(\"trend : Property has to be present in trends object\", function (){",
							"    pm.expect(response.trends[0]).to.have.property('trend');",
							"    });",
							"",
							"    pm.test(\"account_id : Property has to be present in trends object\", function (){",
							"    pm.expect(response.trends[0]).to.have.property('account_id');",
							"    });",
							"",
							"    pm.test(\"minBalancesIds : Property has to be present in trends object\", function (){",
							"    pm.expect(response.trends[0]).to.have.property('minBalancesIds');",
							"    });",
							"                    ",
							"    pm.test(\"date : Property has to be present in minBalancesIds object\", function (){",
							"    pm.expect(response.trends[0].minBalancesIds[0]).to.have.property('date');",
							"    });",
							"",
							"    pm.test(\"particular : Property has to be present in minBalancesIds object\", function (){",
							"    pm.expect(response.trends[0].minBalancesIds[0]).to.have.property('particular');",
							"    });",
							"",
							"    pm.test(\"counterparty : Property has to be present in minBalancesIds object\", function (){",
							"    pm.expect(response.trends[0].minBalancesIds[0]).to.have.property('counterparty');",
							"    });",
							"",
							"    pm.test(\"verified_counterparty : Property has to be present in minBalancesIds object\", function (){",
							"    pm.expect(response.trends[0].minBalancesIds[0]).to.have.property('verified_counterparty');",
							"    });",
							"",
							"    pm.test(\"debit : Property has to be present in minBalancesIds object\", function (){",
							"    pm.expect(response.trends[0].minBalancesIds[0]).to.have.property('debit');",
							"    });",
							"",
							"    pm.test(\"credit : Property has to be present in minBalancesIds object\", function (){",
							"    pm.expect(response.trends[0].minBalancesIds[0]).to.have.property('credit');",
							"    });",
							"",
							"    pm.test(\"balance : Property has to be present in minBalancesIds object\", function (){",
							"    pm.expect(response.trends[0].minBalancesIds[0]).to.have.property('balance');",
							"    });",
							"",
							"    pm.test(\"system_generated_tags : Property has to be present in minBalancesIds object\", function (){",
							"    pm.expect(response.trends[0].minBalancesIds[0]).to.have.property('system_generated_tags');",
							"    });",
							"",
							"    pm.test(\"modified_tags : Property has to be present in minBalancesIds object\", function (){",
							"    pm.expect(response.trends[0].minBalancesIds[0]).to.have.property('modified_tags');",
							"    });",
							"",
							"    pm.test(\"cheque_number : Property has to be present in minBalancesIds object\", function (){",
							"    pm.expect(response.trends[0].minBalancesIds[0]).to.have.property('cheque_number');",
							"    });",
							"",
							"    pm.test(\"computed_balance : Property has to be present in minBalancesIds object\", function (){",
							"    pm.expect(response.trends[0].minBalancesIds[0]).to.have.property('computed_balance');",
							"    });",
							"",
							"    pm.test(\"id : Property has to be present in minBalancesIds object\", function (){",
							"    pm.expect(response.trends[0].minBalancesIds[0]).to.have.property('id');",
							"    });",
							"",
							"    pm.test(\"account_no : Property has to be present in minBalancesIds object\", function (){",
							"    pm.expect(response.trends[0].minBalancesIds[0]).to.have.property('account_no');",
							"    });",
							"    ",
							"    pm.test(\"amount : Property has to be present in minBalancesIds object\", function (){",
							"    pm.expect(response.trends[0].minBalancesIds[0]).to.have.property('amount');",
							"    });",
							"",
							"    pm.test(\"transaction_type : Property has to be present in minBalancesIds object\", function (){",
							"    pm.expect(response.trends[0].minBalancesIds[0]).to.have.property('transaction_type');",
							"    });",
							"",
							"    pm.test(\"tags : Property has to be present in minBalancesIds object\", function (){",
							"    pm.expect(response.trends[0].minBalancesIds[0]).to.have.property('tags');",
							"    });",
							"",
							"    pm.test(\"gap : Property has to be present in minBalancesIds object\", function (){",
							"    pm.expect(response.trends[0].minBalancesIds[0]).to.have.property('gap');",
							"    });",
							"",
							"    pm.test(\"file_id : Property has to be present in minBalancesIds object\", function (){",
							"    pm.expect(response.trends[0].minBalancesIds[0]).to.have.property('file_id');",
							"    });",
							"",
							"    pm.test(\"maxBalancesIds : Property has to be present in trends object\", function (){",
							"    pm.expect(response.trends[0]).to.have.property('maxBalancesIds');",
							"    });",
							"",
							"    pm.test(\"date : Property has to be present in maxBalancesIds object\", function (){",
							"    pm.expect(response.trends[0].maxBalancesIds[0]).to.have.property('date');",
							"    });",
							"",
							"    pm.test(\"particular : Property has to be present in maxBalancesIds object\", function (){",
							"    pm.expect(response.trends[0].maxBalancesIds[0]).to.have.property('particular');",
							"    });",
							"",
							"    pm.test(\"counterparty : Property has to be present in maxBalancesIds object\", function (){",
							"    pm.expect(response.trends[0].maxBalancesIds[0]).to.have.property('counterparty');",
							"    });",
							"",
							"    pm.test(\"verified_counterparty : Property has to be present in maxBalancesIds object\", function (){",
							"    pm.expect(response.trends[0].maxBalancesIds[0]).to.have.property('verified_counterparty');",
							"    });",
							"",
							"    pm.test(\"debit : Property has to be present in maxBalancesIds object\", function (){",
							"    pm.expect(response.trends[0].maxBalancesIds[0]).to.have.property('debit');",
							"    });",
							"",
							"    pm.test(\"credit : Property has to be present in maxBalancesIds object\", function (){",
							"    pm.expect(response.trends[0].maxBalancesIds[0]).to.have.property('credit');",
							"    });",
							"",
							"    pm.test(\"balance : Property has to be present in maxBalancesIds object\", function (){",
							"    pm.expect(response.trends[0].maxBalancesIds[0]).to.have.property('balance');",
							"    });",
							"",
							"    pm.test(\"system_generated_tags : Property has to be present in maxBalancesIds object\", function (){",
							"    pm.expect(response.trends[0].maxBalancesIds[0]).to.have.property('system_generated_tags');",
							"    });",
							"",
							"    pm.test(\"modified_tags : Property has to be present in maxBalancesIds object\", function (){",
							"    pm.expect(response.trends[0].maxBalancesIds[0]).to.have.property('modified_tags');",
							"    });",
							"",
							"    pm.test(\"cheque_number : Property has to be present in maxBalancesIds object\", function (){",
							"    pm.expect(response.trends[0].maxBalancesIds[0]).to.have.property('cheque_number');",
							"    });",
							"",
							"    pm.test(\"computed_balance : Property has to be present in maxBalancesIds object\", function (){",
							"    pm.expect(response.trends[0].maxBalancesIds[0]).to.have.property('computed_balance');",
							"    });",
							"",
							"    pm.test(\"id : Property has to be present in maxBalancesIds object\", function (){",
							"    pm.expect(response.trends[0].maxBalancesIds[0]).to.have.property('id');",
							"    });",
							"",
							"    pm.test(\"account_no : Property has to be present in maxBalancesIds object\", function (){",
							"    pm.expect(response.trends[0].maxBalancesIds[0]).to.have.property('account_no');",
							"    });",
							"    ",
							"    pm.test(\"amount : Property has to be present in maxBalancesIds object\", function (){",
							"    pm.expect(response.trends[0].maxBalancesIds[0]).to.have.property('amount');",
							"    });",
							"",
							"    pm.test(\"transaction_type : Property has to be present in maxBalancesIds object\", function (){",
							"    pm.expect(response.trends[0].maxBalancesIds[0]).to.have.property('transaction_type');",
							"    });",
							"",
							"    pm.test(\"tags : Property has to be present in maxBalancesIds object\", function (){",
							"    pm.expect(response.trends[0].maxBalancesIds[0]).to.have.property('tags');",
							"    });",
							"",
							"    pm.test(\"gap : Property has to be present in maxBalancesIds object\", function (){",
							"    pm.expect(response.trends[0].maxBalancesIds[0]).to.have.property('gap');",
							"    });",
							"",
							"    pm.test(\"file_id : Property has to be present in maxBalancesIds object\", function (){",
							"    pm.expect(response.trends[0].maxBalancesIds[0]).to.have.property('file_id');",
							"    });",
							"}",
							"else if(pm.response.status == \"Bad Request\")",
							"{",
							"    pm.test(\"Status code is 400, Failed to fetch summary\", function () {",
							"    pm.response.to.have.status(400);",
							"    });",
							"",
							"    pm.test(\"error : Property has to be present\", function (){",
							"    pm.expect(response).to.have.property('error');",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"    pm.expect(pm.response.text()).to.include(\"Invalid bank account id\");",
							"        });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"Invalid account reference number\");",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"    pm.expect(pm.response.text()).to.include(\"More than one account id/account reference number found in request parameter\");",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"    pm.expect(pm.response.text()).to.include(\"Anyone is mandatory, Account id or Account reference number\");",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"    pm.expect(pm.response.text()).to.include(\"Invalid type, accepted type is credit or debit\");",
							"    });",
							"",
							"}",
							"else if(pm.response.status == \"Server Error\")",
							"{",
							"    pm.test(\"Status Code is 500: Server Error, Code is breaking/Runtime exception not being handled with appropriate error message\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"else if(pm.response.status == \"Unauthorized\")",
							"{",
							"    pm.test(\"Status Code is 401: Unauthorized, Login failed\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"else",
							"{",
							"    pm.test(\"Please check the inputs\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/api/bsa/v2/analysis/trends?accountReferenceNumber={{AccountReferenceNumber}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"bsa",
						"v2",
						"analysis",
						"trends"
					],
					"query": [
						{
							"key": "accountReferenceNumber",
							"value": "{{AccountReferenceNumber}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Fetch Charges",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a377ec0d-23db-493f-bd7f-ba6975136123",
						"exec": [
							"var response = pm.response.json();",
							"",
							"if(pm.response.status == \"OK\")",
							"{",
							"    pm.test(\"Status code is 200, Successfully fetched charges\", function () {",
							"    pm.response.to.have.status(200);",
							"    });",
							"",
							"    pm.test(\"charges : Property has to be present in the response\", function (){",
							"    pm.expect(response).to.have.property('charges');",
							"    });",
							"",
							"    pm.test(\"date: Property has to be present in charges object\", function (){",
							"    pm.expect(response.charges[0]).to.have.property('date');",
							"    });",
							"",
							"    pm.test(\"particular: Property has to be present in charges object\", function (){",
							"    pm.expect(response.charges[0]).to.have.property('particular');",
							"    });",
							"",
							"    pm.test(\"type: Property has to be present in charges object\", function (){",
							"    pm.expect(response.charges[0]).to.have.property('type');",
							"    });",
							"",
							"    pm.test(\"amount: Property has to be present in charges object\", function (){",
							"    pm.expect(response.charges[0]).to.have.property('amount');",
							"    });",
							"   ",
							"    pm.test(\"balance: Property has to be present in charges object\", function (){",
							"    pm.expect(response.charges[0]).to.have.property('balance');",
							"    });",
							"",
							"    pm.test(\"tags: Property has to be present in charges object\", function (){",
							"    pm.expect(response.charges[0]).to.have.property('tags');",
							"    });",
							"",
							"    pm.test(\"honoured_date: Property has to be present in charges object\", function (){",
							"    pm.expect(response.charges[0]).to.have.property('honoured_date');",
							"    });",
							"",
							"",
							"}",
							"else if(pm.response.status == \"Bad Request\")",
							"{",
							"    pm.test(\"Status code is 400, Failed to fetch summary\", function () {",
							"    pm.response.to.have.status(400);",
							"    });",
							"",
							"    pm.test(\"error : Property has to be present\", function (){",
							"    pm.expect(response).to.have.property('error');",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"    pm.expect(pm.response.text()).to.include(\"Invalid bank account id\");",
							"        });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"Invalid account reference number\");",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"    pm.expect(pm.response.text()).to.include(\"More than one account id/account reference number found in request parameter\");",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"    pm.expect(pm.response.text()).to.include(\"Anyone is mandatory, Account id or Account reference number\");",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"    pm.expect(pm.response.text()).to.include(\"Invalid type, accepted type is inward or outward\");",
							"    });",
							"",
							"}",
							"else if(pm.response.status == \"Server Error\")",
							"{",
							"    pm.test(\"Status Code is 500: Server Error, Code is breaking/Runtime exception not being handled with appropriate error message\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"else if(pm.response.status == \"Unauthorized\")",
							"{",
							"    pm.test(\"Status Code is 401: Unauthorized, Login failed\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"else",
							"{",
							"    pm.test(\"Please check the inputs\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/api/bsa/v2/analysis/charges?accountReferenceNumber={{AccountReferenceNumber}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"bsa",
						"v2",
						"analysis",
						"charges"
					],
					"query": [
						{
							"key": "accountReferenceNumber",
							"value": "{{AccountReferenceNumber}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Fetch tags",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e4f1fd13-2bfe-42bb-b997-7318b6fe8243",
						"exec": [
							"var response = pm.response.json();",
							"",
							"if(pm.response.status == \"OK\")",
							"{",
							"    pm.test(\"Status code is 200, Successfully fetched tags\", function () {",
							"    pm.response.to.have.status(200);",
							"    });",
							"",
							"    pm.test(\"tags : Property has to be present in the response\", function (){",
							"    pm.expect(response).to.have.property('tags');",
							"    });",
							"",
							"}",
							"else if(pm.response.status == \"Bad Request\")",
							"{",
							"    pm.test(\"Status code is 400, Failed to fetch tags\", function () {",
							"    pm.response.to.have.status(400);",
							"    });",
							"",
							"    pm.test(\"error : Property has to be present\", function (){",
							"    pm.expect(response).to.have.property('error');",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"    pm.expect(pm.response.text()).to.include(\"Invalid bank account id\");",
							"        });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"Invalid account reference number\");",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"    pm.expect(pm.response.text()).to.include(\"More than one account id/account reference number found in request parameter\");",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"    pm.expect(pm.response.text()).to.include(\"Anyone is mandatory, Account id or Account reference number\");",
							"    });",
							"",
							"}",
							"else if(pm.response.status == \"Server Error\")",
							"{",
							"    pm.test(\"Status Code is 500: Server Error, Code is breaking/Runtime exception not being handled with appropriate error message\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"else if(pm.response.status == \"Unauthorized\")",
							"{",
							"    pm.test(\"Status Code is 401: Unauthorized, Login failed\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"else",
							"{",
							"    pm.test(\"Please check the inputs\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/api/bsa/v2/analysis/tags?accountReferenceNumber={{AccountReferenceNumber}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"bsa",
						"v2",
						"analysis",
						"tags"
					],
					"query": [
						{
							"key": "accountId",
							"value": "206",
							"disabled": true
						},
						{
							"key": "accountReferenceNumber",
							"value": "{{AccountReferenceNumber}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Fetch Alerts",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "381bf9d5-9c10-480a-b18a-8d70ac490c70",
						"exec": [
							"var response = pm.response.json();",
							"",
							"if(pm.response.status == \"OK\")",
							"{",
							"    pm.test(\"Status code is 200, Successfully Fetched Alerts\", function () {",
							"    pm.response.to.have.status(200);",
							"    });",
							"",
							"    if(pm.expect(response).to.have.property('message')){",
							"",
							"        pm.test(\"message : Property has to be present in the response\", function (){",
							"        pm.expect(response).to.have.property('message');",
							"        });",
							"",
							"        pm.test(\"The message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"No Data\");",
							"        });",
							"    }",
							"",
							"    else{",
							"        pm.test(\"The message includes \" + pm.response.text());",
							"    }",
							"}",
							"else if(pm.response.status == \"Bad Request\")",
							"{",
							"    pm.test(\"Status code is 400, Failed To Fetch Alerts\", function () {",
							"    pm.response.to.have.status(400);",
							"    });",
							"",
							"    pm.test(\"error : Property has to be present\", function (){",
							"    pm.expect(response).to.have.property('error');",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"    pm.expect(pm.response.text()).to.include(\"Invalid bank account id\");",
							"        });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"Invalid account reference number\");",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"    pm.expect(pm.response.text()).to.include(\"More than one account id/account reference number found in request parameter\");",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"    pm.expect(pm.response.text()).to.include(\"Anyone is mandatory, Account id or Account reference number\");",
							"    });",
							"",
							"",
							"}",
							"else if(pm.response.status == \"Server Error\")",
							"{",
							"    pm.test(\"Status Code is 500: Server Error, Code is breaking/Runtime exception not being handled with appropriate error message\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"else if(pm.response.status == \"Unauthorized\")",
							"{",
							"    pm.test(\"Status Code is 401: Unauthorized, Login failed\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"else",
							"{",
							"    pm.test(\"Please check the inputs\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/api/bsa/v2/analysis/alerts?accountReferenceNumber={{AccountReferenceNumber}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"bsa",
						"v2",
						"analysis",
						"alerts"
					],
					"query": [
						{
							"key": "accountId",
							"value": "265",
							"disabled": true
						},
						{
							"key": "accountReferenceNumber",
							"value": "{{AccountReferenceNumber}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Cumulative Distribution Chart",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7afc6437-7cf5-4570-a1c5-dc23ac4d6506",
						"exec": [
							"var response = pm.response.json();",
							"",
							"if(pm.response.status == \"OK\")",
							"{",
							"    pm.test(\"Status code is 200, Successfully fetched Cumulative Distribution Chart\", function () {",
							"    pm.response.to.have.status(200);",
							"    });",
							"",
							"    pm.test(\"entirePeriod : Property has to be present\", function (){",
							"    pm.expect(response).to.have.property('entirePeriod');",
							"    });",
							"",
							"    pm.test(\"x : Property has to be present in the entirePeriod object\", function (){",
							"    pm.expect(response.entirePeriod[0]).to.have.property('x');",
							"    });",
							"",
							"    pm.test(\"y : Property has to be present in the entirePeriod object\", function (){",
							"    pm.expect(response.entirePeriod[0]).to.have.property('y');",
							"    });",
							"",
							"    pm.test(\"selectedPeriod : Property has to be present\", function (){",
							"    pm.expect(response).to.have.property('selectedPeriod');",
							"    });",
							"",
							"    pm.test(\"x : Property has to be present in the selectedPeriod object\", function (){",
							"    pm.expect(response.selectedPeriod[0]).to.have.property('x');",
							"    });",
							"",
							"    pm.test(\"y : Property has to be present in the selectedPeriod object\", function (){",
							"    pm.expect(response.selectedPeriod[0]).to.have.property('y');",
							"    });",
							"    ",
							"}",
							"else if(pm.response.status == \"Bad Request\")",
							"{",
							"    pm.test(\"Status code is 400, Failed to Fetch Cumulative Distribution Chart\", function () {",
							"    pm.response.to.have.status(400);",
							"    });",
							"",
							"    pm.test(\"error : Property has to be present\", function (){",
							"    pm.expect(response).to.have.property('error');",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"    pm.expect(pm.response.text()).to.include(\"Invalid bank account id\");",
							"        });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"    pm.expect(pm.response.text()).to.include(\"Invalid account reference number\");",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"    pm.expect(pm.response.text()).to.include(\"More than one account id/account reference number found in request parameter\");",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"    pm.expect(pm.response.text()).to.include(\"Anyone is mandatory, Account id or Account reference number\");",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"    pm.expect(pm.response.text()).to.include(\"Invalid start/end date\");",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"    pm.expect(pm.response.text()).to.include(\"Invalid start date, accepted only (yyyy-MM-dd) format\");",
							"    });",
							"",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"    pm.expect(pm.response.text()).to.include(\"Start date/End Date cannot be empty\");",
							"    });",
							"",
							"}",
							"else if(pm.response.status == \"Server Error\")",
							"{",
							"    pm.test(\"Status Code is 500: Server Error, Code is breaking/Runtime exception not being handled with appropriate error message\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"else if(pm.response.status == \"Unauthorized\")",
							"{",
							"    pm.test(\"Status Code is 401: Unauthorized, Login failed\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"else",
							"{",
							"    pm.test(\"Please check the inputs\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/api/bsa/v2/analysis/cdf?accountReferenceNumber={{AccountReferenceNumber}}&startDate={{start_date}}&endDate={{end_date}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"bsa",
						"v2",
						"analysis",
						"cdf"
					],
					"query": [
						{
							"key": "accountReferenceNumber",
							"value": "{{AccountReferenceNumber}}"
						},
						{
							"key": "startDate",
							"value": "{{start_date}}"
						},
						{
							"key": "endDate",
							"value": "{{end_date}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Fetch Aggregate Analysis",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "811d3f73-dfaf-4e2a-bc4c-e8cb917f64bd",
						"exec": [
							"var response = pm.response.json();",
							"",
							"if(pm.response.status == \"OK\")",
							"{",
							"    pm.test(\"Status code is 200, Successfully fetched the aggregate\", function () {",
							"    pm.response.to.have.status(200);",
							"    });",
							"",
							"    pm.test(\"bank_statements : Property has to be present in the response\", function (){",
							"    pm.expect(response).to.have.property('bank_statements');",
							"    });",
							"",
							"    pm.test(\"summary : Property has to be present in the bank_statements object\", function (){",
							"    pm.expect(response.bank_statements[0]).to.have.property('summary');",
							"    });",
							"",
							"    pm.test(\"date : Property has to be present in the summary object\", function (){",
							"    pm.expect(response.bank_statements[0].summary[0]).to.have.property('date');",
							"    });",
							"",
							"    pm.test(\"total_inflow : Property has to be present in the summary object\", function (){",
							"    pm.expect(response.bank_statements[0].summary[0]).to.have.property('total_inflow');",
							"    });",
							"",
							"    pm.test(\"inflow_count : Property has to be present in the summary object\", function (){",
							"    pm.expect(response.bank_statements[0].summary[0]).to.have.property('inflow_count');",
							"    });",
							"",
							"    pm.test(\"total_outflow : Property has to be present in the summary object\", function (){",
							"    pm.expect(response.bank_statements[0].summary[0]).to.have.property('total_outflow');",
							"    });",
							"",
							"    pm.test(\"outflow_count : Property has to be present in the summary object\", function (){",
							"    pm.expect(response.bank_statements[0].summary[0]).to.have.property('outflow_count');",
							"    });",
							"",
							"    pm.test(\"total_delta : Property has to be present in the summary object\", function (){",
							"    pm.expect(response.bank_statements[0].summary[0]).to.have.property('total_delta');",
							"    });",
							"",
							"    pm.test(\"daily_average_balance : Property has to be present in the summary object\", function (){",
							"    pm.expect(response.bank_statements[0].summary[0]).to.have.property('daily_average_balance');",
							"    });",
							"",
							"    pm.test(\"total_emi : Property has to be present in the summary object\", function (){",
							"    pm.expect(response.bank_statements[0].summary[0]).to.have.property('total_emi');",
							"    });",
							"",
							"    pm.test(\"emi_count : Property has to be present in the summary object\", function (){",
							"    pm.expect(response.bank_statements[0].summary[0]).to.have.property('emi_count');",
							"    });",
							"",
							"    pm.test(\"total_cash_inflow : Property has to be present in the summary object\", function (){",
							"    pm.expect(response.bank_statements[0].summary[0]).to.have.property('total_cash_inflow');",
							"    });",
							"",
							"    pm.test(\"cash_inflow_count : Property has to be present in the summary object\", function (){",
							"    pm.expect(response.bank_statements[0].summary[0]).to.have.property('cash_inflow_count');",
							"    });     ",
							"",
							"    pm.test(\"total_cash_outflow : Property has to be present in the summary object\", function (){",
							"    pm.expect(response.bank_statements[0].summary[0]).to.have.property('total_cash_outflow');",
							"    }); ",
							"",
							"    pm.test(\"cash_outflow_count : Property has to be present in the summary object\", function (){",
							"    pm.expect(response.bank_statements[0].summary[0]).to.have.property('cash_outflow_count');",
							"    });  ",
							"",
							"    pm.test(\"total_biz_inflow : Property has to be present in the summary object\", function (){",
							"    pm.expect(response.bank_statements[0].summary[0]).to.have.property('total_biz_inflow');",
							"    }); ",
							"",
							"    pm.test(\"biz_inflow_count : Property has to be present in the summary object\", function (){",
							"    pm.expect(response.bank_statements[0].summary[0]).to.have.property('biz_inflow_count');",
							"    });    ",
							"",
							"    pm.test(\"total_biz_outflow : Property has to be present in the summary object\", function (){",
							"    pm.expect(response.bank_statements[0].summary[0]).to.have.property('total_biz_outflow');",
							"    });",
							"",
							"    pm.test(\"biz_outflow_count : Property has to be present in the summary object\", function (){",
							"    pm.expect(response.bank_statements[0].summary[0]).to.have.property('biz_outflow_count');",
							"    });",
							"",
							"    pm.test(\"central_credit_day : Property has to be present in the summary object\", function (){",
							"    pm.expect(response.bank_statements[0].summary[0]).to.have.property('central_credit_day');",
							"    });",
							"",
							"    pm.test(\"central_debit_day : Property has to be present in the summary object\", function (){",
							"    pm.expect(response.bank_statements[0].summary[0]).to.have.property('central_debit_day');",
							"    });      ",
							"",
							"    pm.test(\"statement_period : Property has to be present in the summary object\", function (){",
							"    pm.expect(response.bank_statements[0].summary[0]).to.have.property('statement_period');",
							"    }); ",
							"",
							"    pm.test(\"allTransactions : Property has to be present in the summary object\", function (){",
							"    pm.expect(response.bank_statements[0].summary[0]).to.have.property('allTransactions');",
							"    }); ",
							"",
							"    pm.test(\"all_transactions : Property has to be present in the summary object\", function (){",
							"    pm.expect(response.bank_statements[0].summary[0]).to.have.property('all_transactions');",
							"    });",
							"",
							"    if(response.bank_statements[0].summary[0].all_transactions[0]){",
							"",
							"        pm.test(\"account_no : Property has to be present in the all_transactions object\", function (){",
							"        pm.expect(response.bank_statements[0].summary[0].all_transactions[0]).to.have.property('account_no');",
							"        }); ",
							"",
							"        pm.test(\"date : Property has to be present in the all_transactions object\", function (){",
							"        pm.expect(response.bank_statements[0].summary[0].all_transactions[0]).to.have.property('date');",
							"        });",
							"",
							"        pm.test(\"counterparty : Property has to be present in the all_transactions object\", function (){",
							"        pm.expect(response.bank_statements[0].summary[0].all_transactions[0]).to.have.property('counterparty');",
							"        });",
							"",
							"        pm.test(\"particular : Property has to be present in the all_transactions object\", function (){",
							"        pm.expect(response.bank_statements[0].summary[0].all_transactions[0]).to.have.property('particular');",
							"        });",
							"",
							"        pm.test(\"credit/debit: Property has to be present in the all_transactions object\", function (){",
							"        pm.expect(response.bank_statements[0].summary[0].all_transactions[0]).to.have.property('credit');",
							"        pm.expect(response.bank_statements[0].summary[0].all_transactions[0]).to.have.property('debit');",
							"        });",
							"",
							"        pm.test(\"balance : Property has to be present in the all_transactions object\", function (){",
							"        pm.expect(response.bank_statements[0].summary[0].all_transactions[0]).to.have.property('balance');",
							"        });",
							"",
							"        pm.test(\"system_generated_tags : Property has to be present in the all_transactions object\", function (){",
							"        pm.expect(response.bank_statements[0].summary[0].all_transactions[0]).to.have.property('system_generated_tags');",
							"        });",
							"",
							"        pm.test(\"modified_tags : Property has to be present in the all_transactions object\", function (){",
							"        pm.expect(response.bank_statements[0].summary[0].all_transactions[0]).to.have.property('modified_tags');",
							"        });",
							"",
							"        pm.test(\"gap : Property has to be present in the all_transactions object\", function (){",
							"        pm.expect(response.bank_statements[0].summary[0].all_transactions[0]).to.have.property('gap');",
							"        });",
							"",
							"        pm.test(\"cheque_number : Property has to be present in the all_transactions object\", function (){",
							"        pm.expect(response.bank_statements[0].summary[0].all_transactions[0]).to.have.property('cheque_number');",
							"        });",
							"",
							"        pm.test(\"id : Property has to be present in the all_transactions object\", function (){",
							"        pm.expect(response.bank_statements[0].summary[0].all_transactions[0]).to.have.property('id');",
							"        });",
							"",
							"        pm.test(\"computed_balance : Property has to be present in the all_transactions object\", function (){",
							"        pm.expect(response.bank_statements[0].summary[0].all_transactions[0]).to.have.property('computed_balance');",
							"        });",
							"    }",
							"    pm.test(\"alerts : Property has to be present in the bank_statements object\", function (){",
							"    pm.expect(response.bank_statements[0]).to.have.property('alerts');",
							"    });",
							"",
							"    pm.test(\"circular_transactions : Property has to be present in the bank_statements object\", function (){",
							"    pm.expect(response.bank_statements[0]).to.have.property('circular_transactions');",
							"    });",
							"",
							"    if(response.bank_statements[0].circular_transactions[0]){",
							"",
							"        pm.test(\"list_of_transactions : Property has to be present in the circular_transactions object\", function(){",
							"        pm.expect(response.bank_statements[0].circular_transactions[0]).to.have.property('list_of_transactions');",
							"        });",
							"",
							"        pm.test(\"id : Property has to be present in the list_of_transactions object\", function (){",
							"        pm.expect(response.bank_statements[0].circular_transactions[0].list_of_transactions[0]).to.have.property('id');",
							"        });",
							"",
							"        pm.test(\"file_id : Property has to be present in the list_of_transactions object\", function (){",
							"        pm.expect(response.bank_statements[0].circular_transactions[0].list_of_transactions[0]).to.have.property('file_id');",
							"        });",
							"",
							"        pm.test(\"account_no : Property has to be present in the list_of_transactions object\", function (){",
							"        pm.expect(response.bank_statements[0].circular_transactions[0].list_of_transactions[0]).to.have.property('account_no');",
							"        });",
							"",
							"        pm.test(\"date : Property has to be present in the list_of_transactions object\", function (){",
							"        pm.expect(response.bank_statements[0].circular_transactions[0].list_of_transactions[0]).to.have.property('date');",
							"        });",
							"",
							"        pm.test(\"amount : Property has to be present in the list_of_transactions object\", function (){",
							"        pm.expect(response.bank_statements[0].circular_transactions[0].list_of_transactions[0]).to.have.property('amount');",
							"        });",
							"",
							"        pm.test(\"particular : Property has to be present in the list_of_transactions object\", function (){",
							"        pm.expect(response.bank_statements[0].circular_transactions[0].list_of_transactions[0]).to.have.property('particular');",
							"        });",
							"",
							"        pm.test(\"counterparty : Property has to be present in the list_of_transactions object\", function (){",
							"        pm.expect(response.bank_statements[0].circular_transactions[0].list_of_transactions[0]).to.have.property('counterparty');",
							"        });",
							"",
							"        pm.test(\"verified_counterparty : Property has to be present in the list_of_transactions object\", function (){",
							"        pm.expect(response.bank_statements[0].circular_transactions[0].list_of_transactions[0]).to.have.property('verified_counterparty');",
							"        });",
							"        ",
							"        pm.test(\"transaction_type : Property has to be present in the list_of_transactions object\", function (){",
							"        pm.expect(response.bank_statements[0].circular_transactions[0].list_of_transactions[0]).to.have.property('transaction_type');",
							"        });",
							"        ",
							"        pm.test(\"tags : Property has to be present in the list_of_transactions object\", function (){",
							"        pm.expect(response.bank_statements[0].circular_transactions[0].list_of_transactions[0]).to.have.property('tags');",
							"        });",
							"",
							"        pm.test(\"debit : Property has to be present in the list_of_transactions object\", function (){",
							"        pm.expect(response.bank_statements[0].circular_transactions[0].list_of_transactions[0]).to.have.property('debit');",
							"        });",
							"",
							"        pm.test(\"credit : Property has to be present in the list_of_transactions object\", function (){",
							"        pm.expect(response.bank_statements[0].circular_transactions[0].list_of_transactions[0]).to.have.property('credit');",
							"        });",
							"",
							"        pm.test(\"balance : Property has to be present in the list_of_transactions object\", function (){",
							"        pm.expect(response.bank_statements[0].circular_transactions[0].list_of_transactions[0]).to.have.property('balance');",
							"        });",
							"",
							"        pm.test(\"system_generated_tags : Property has to be present in the list_of_transactions object\", function (){",
							"        pm.expect(response.bank_statements[0].circular_transactions[0].list_of_transactions[0]).to.have.property('system_generated_tags');",
							"        });",
							"",
							"        pm.test(\"modified_tags : Property has to be present in the list_of_transactions object\", function (){",
							"        pm.expect(response.bank_statements[0].circular_transactions[0].list_of_transactions[0]).to.have.property('modified_tags');",
							"        });",
							"",
							"        pm.test(\"gap : Property has to be present in the list_of_transactions object\", function (){",
							"        pm.expect(response.bank_statements[0].circular_transactions[0].list_of_transactions[0]).to.have.property('gap');",
							"        });",
							"",
							"        pm.test(\"cheque_number : Property has to be present in the list_of_transactions object\", function (){",
							"        pm.expect(response.bank_statements[0].circular_transactions[0].list_of_transactions[0]).to.have.property('cheque_number');",
							"        });",
							"",
							"        pm.test(\"computed_balance : Property has to be present in the list_of_transactions object\", function (){",
							"        pm.expect(response.bank_statements[0].circular_transactions[0].list_of_transactions[0]).to.have.property('computed_balance');",
							"        });",
							"",
							"        pm.test(\"account_id : Property has to be present in the list_of_transactions object\", function (){",
							"        pm.expect(response.bank_statements[0].circular_transactions[0].list_of_transactions[0]).to.have.property('account_id');",
							"        });",
							"",
							"        pm.test(\"accountReferenceNumber : Property has to be present in the list_of_transactions object\", function (){",
							"        pm.expect(response.bank_statements[0].circular_transactions[0].list_of_transactions[0]).to.have.property('accountReferenceNumber');",
							"        });",
							"",
							"        pm.test(\"transaction_date : Property has to be present in the list_of_transactions object\", function (){",
							"        pm.expect(response.bank_statements[0].circular_transactions[0].list_of_transactions[0]).to.have.property('transaction_date');",
							"        });",
							"    }",
							"} ",
							"else if(pm.response.status == \"Bad Request\")",
							"{",
							"    pm.test(\"Status code is 400, Failed to fetch summary\", function () {",
							"    pm.response.to.have.status(400);",
							"    });",
							"",
							"    pm.test(\"error : Property has to be present\", function (){",
							"    pm.expect(response).to.have.property('error');",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"    pm.expect(pm.response.text()).to.include(\"Invalid bank account id\");",
							"        });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"Invalid account reference number\");",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"    pm.expect(pm.response.text()).to.include(\"More than one account id/account reference number found in request parameter\");",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"    pm.expect(pm.response.text()).to.include(\"Anyone is mandatory, Account id or Account reference number\");",
							"    });",
							"",
							"}",
							"else if(pm.response.status == \"Server Error\")",
							"{",
							"    pm.test(\"Status Code is 500: Server Error, Code is breaking/Runtime exception not being handled with appropriate error message\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"else if(pm.response.status == \"Unauthorized\")",
							"{",
							"    pm.test(\"Status Code is 401: Unauthorized, Login failed\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"else",
							"{",
							"    pm.test(\"Please check the inputs\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							" "
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"accountReferenceNumbers\":[\"{{AccountReferenceNumber}}\"]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api/bsa/v2/aggregate",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"bsa",
						"v2",
						"aggregate"
					]
				}
			},
			"response": []
		},
		{
			"name": "Fetch Utilization",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "eca44e99-4623-45c1-ae77-ae69ee9d9672",
						"exec": [
							"var response = pm.response.json();",
							"",
							"if(pm.response.status == \"OK\")",
							"{",
							"    pm.test(\"Status code is 200, Successfully Fetched Utilization\", function () {",
							"    pm.response.to.have.status(200);",
							"    });",
							"",
							"    if(pm.expect(response).to.have.property('message')){",
							"        pm.test(\"message : Property has to be present in the response\", function (){",
							"        pm.expect(response).to.have.property('message');",
							"        });",
							"",
							"        pm.test(\"The message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"No Data\");",
							"        });",
							"    }",
							"    else{",
							"        pm.test(\"utilization : Property has to be present in the response\", function (){",
							"        pm.expect(response).to.have.property('utilization');",
							"        });",
							"",
							"        pm.test(\"month : Property has to be present in utilization object\", function (){",
							"        pm.expect(response.utilization[0]).to.have.property('month');",
							"        });",
							"",
							"        pm.test(\"avg_bal : Property has to be present in utilization object\", function (){",
							"        pm.expect(response.utilization[0]).to.have.property('avg_bal');",
							"        });",
							"",
							"        pm.test(\"limit : Property has to be present in utilization object\", function (){",
							"        pm.expect(response.utilization[0]).to.have.property('limit');",
							"        });",
							"",
							"        pm.test(\"peak_util : Property has to be present in utilization object\", function (){",
							"        pm.expect(response.utilization[0]).to.have.property('peak_util');",
							"        });",
							"",
							"        pm.test(\"avg_util : Property has to be present in utilization object\", function (){",
							"        pm.expect(response.utilization[0]).to.have.property('avg_util');",
							"        });",
							"",
							"        pm.test(\"overdrawn_days : Property has to be present in utilization object\", function (){",
							"        pm.expect(response.utilization[0]).to.have.property('overdrawn_days');",
							"        });",
							"    }",
							"    ",
							"}",
							"else if(pm.response.status == \"Bad Request\")",
							"{",
							"    pm.test(\"Status code is 400, Failed To Fetch Utilization\", function () {",
							"    pm.response.to.have.status(400);",
							"    });",
							"",
							"    pm.test(\"error : Property has to be present\", function (){",
							"    pm.expect(response).to.have.property('error');",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"    pm.expect(pm.response.text()).to.include(\"Invalid bank account id\");",
							"        });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"Invalid account reference number\");",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"    pm.expect(pm.response.text()).to.include(\"More than one account id/account reference number found in request parameter\");",
							"    });",
							"",
							"    pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"    pm.expect(pm.response.text()).to.include(\"Anyone is mandatory, Account id or Account reference number\");",
							"    });",
							"",
							"",
							"}",
							"else if(pm.response.status == \"Server Error\")",
							"{",
							"    pm.test(\"Status Code is 500: Server Error, Code is breaking/Runtime exception not being handled with appropriate error message\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"else if(pm.response.status == \"Unauthorized\")",
							"{",
							"    pm.test(\"Status Code is 401: Unauthorized, Login failed\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"else",
							"{",
							"    pm.test(\"Please check the inputs\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/api/bsa/v2/analysis/utilization?accountReferenceNumber={{AccountReferenceNumber}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"bsa",
						"v2",
						"analysis",
						"utilization"
					],
					"query": [
						{
							"key": "a",
							"value": null,
							"disabled": true
						},
						{
							"key": "accountReferenceNumber",
							"value": "{{AccountReferenceNumber}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Download CAM",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f0d3c166-1089-48cc-9f48-a0cb187550f5",
						"exec": [
							"var moment = require('moment');",
							"console.log(\"Displaying : require('moment') : \" + moment);",
							"",
							"var timeStamp = pm.globals.get(\"timeStamp\");",
							"console.log(\"Displaying TimeStamp : \" + timeStamp);",
							"",
							"if (!timeStamp) { //create new Timestamp (now + 180 seconds)",
							"    timeStamp = moment().add(120, 'seconds');",
							"    pm.globals.set(\"timeStamp\", timeStamp);",
							"    console.log(\"New TimeStamp : \" + timeStamp);",
							"}",
							"",
							"if(pm.response.status == \"OK\"){",
							"    pm.test(\"Status code is 200, Successfully Downloaded the CAM\", function () {",
							"    pm.response.to.have.status(200);",
							"    });",
							"}",
							"else if(pm.response.status == \"Bad Request\")",
							"{",
							"    if (moment() < moment(pm.globals.get(\"timeStamp\")))",
							"    {   ",
							"        postman.setNextRequest(\"Download CAM\");",
							"    }",
							"    else",
							"    {",
							"        pm.test(\"Set time limit is exceeded\", function() {",
							"            pm.expect.fail();",
							"         });",
							"        console.log(\"Stopping tests...\");",
							"        postman.setNextRequest(null);",
							"        pm.globals.unset(\"timeStamp\");",
							"",
							"        pm.test(\"Status code is 400, Failed to download the CAM\", function () {",
							"        pm.response.to.have.status(400);",
							"        });",
							"",
							"        pm.test(\"error : Property has to be present\", function (){",
							"        pm.expect(pm.response).to.have.property('error');",
							"        });",
							"",
							"        pm.test(\"timestamp : Property has to be present\", function (){",
							"        pm.expect(pm.response).to.have.property('timestamp');",
							"        });",
							"",
							"        pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"Invalid bank account id\");",
							"        });",
							"",
							"        pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"Invalid account reference number\");",
							"        });",
							"",
							"        pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"Invalid id(s)\");",
							"        });",
							"",
							"        pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"Account not processed\");",
							"        });",
							"",
							"        pm.test(\"The error message includes \" + pm.response.text(), function () {",
							"        pm.expect(pm.response.text()).to.include(\"Account is deleted\");",
							"        });",
							"    }",
							"}",
							"else if(pm.response.status == \"Server Error\")",
							"{",
							"    pm.test(\"Status Code is 500: Server Error, Code is breaking/Runtime exception not being handled with appropriate error message\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"else if(pm.response.status == \"Unauthorized\")",
							"{",
							"    pm.test(\"Status Code is 401: Unauthorized, Login failed\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							"else",
							"{",
							"    pm.test(\"Please check the inputs\", function(){",
							"        pm.expect.fail();",
							"    });",
							"}",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "bf6ba165-d53e-4325-9d64-a4785a49d756",
						"exec": [
							"setTimeout(function(){}, 1000);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/api/bsa/v2/cam/download?accountReferenceNumber={{AccountReferenceNumber}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"bsa",
						"v2",
						"cam",
						"download"
					],
					"query": [
						{
							"key": "accountReferenceNumber",
							"value": "{{AccountReferenceNumber}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}